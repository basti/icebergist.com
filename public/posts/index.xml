<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Icebergist</title>
    <link>http://blog.orangeiceberg.com/posts/</link>
    <description>Recent content in Posts on Icebergist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Feb 2017 15:07:40 +0100</lastBuildDate>
    <atom:link href="http://blog.orangeiceberg.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introduction to Ember Closure Actions</title>
      <link>http://blog.orangeiceberg.com/posts/introduction-to-ember-closure-actions</link>
      <pubDate>Fri, 03 Feb 2017 15:07:40 +0100</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/introduction-to-ember-closure-actions</guid>
      <description>

&lt;p&gt;Closure actions were introduced in Ember v.1.13.0 and they brought a lot of improvements over old action handling mechanism in Ember. These improvements enabled Ember to adopt new data flow model called - Data Down Actions Up (DDAU) that simplified communication between parent and child components.&lt;/p&gt;

&lt;h2 id=&#34;what-are-closure-actions:cd31b1a8953faed5014f17c722aa7ebc&#34;&gt;What are closure actions?&lt;/h2&gt;

&lt;p&gt;Closure actions are based on JavaScript closures which are basically functions that remember environment in which they were created. So closure actions are just functions that remember context in which they were defined. Since they are just functions we can pass them as a value and call them directly as a callback. This enables us to pass them to inner components and call them directly from components.
With the old approach we had to use &lt;code&gt;sendAction()&lt;/code&gt; from component and call action on controller or route.&lt;/p&gt;

&lt;h2 id=&#34;how-to-create-closure-actions:cd31b1a8953faed5014f17c722aa7ebc&#34;&gt;How to create closure actions?&lt;/h2&gt;

&lt;p&gt;Every action defined in controller can become a closure action. It’s important to note that it’s possible to make actions defined in routes closure actions but you need to use &lt;a href=&#34;https://github.com/DockYard/ember-route-action-helper&#34;&gt;ember-route-action-helper&lt;/a&gt; addon for that. Closure actions are created in template using &lt;code&gt;action&lt;/code&gt; helper which wrapps the action in the current context and returns it as a closure function.&lt;/p&gt;

&lt;h2 id=&#34;example:cd31b1a8953faed5014f17c722aa7ebc&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;Let’s define action inside our application controller.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//controllers/application.js
export default Ember.Controller.extend({
  actions: {
    submit() {
      //some logic
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In application.hbs we create closure action using &lt;code&gt;action&lt;/code&gt; helper and we assign it to example-comp&amp;rsquo;s save attribute.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{example-comp save=(action &#39;submit&#39;)}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Submit action is now assigned to save attribute of example-comp component so we can call it directly inside component.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- example-comp.hbs --&amp;gt;

&amp;lt;button onclick={{action &#39;saveItem&#39;}}&amp;gt;Save&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//example-comp.js
export default Ember.Component.extend({
  actions: {
    saveItem() {
      this.save();
      // Calling save directly
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Passing closure action through multiple levels of components is easy.
Let&amp;rsquo;s say we want to call submit action in example-comp-child component. Since we have save attribute inside example-comp with submit action assigned to it we just need to pass it one level down.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{example-comp-child save=(action save)}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Calling action from example-comp-child is the same as for example-comp component.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//example-comp-child.js
export default Ember.Component.extend({
  actions: {
    saveItem() {
      this.save();
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Closure actions simplify action passing mechanism in Ember but they can also return values, enable currying and much more. It definitely worth spending your time learning all closure actions features and I hope this introduction can help with that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Copy and sync files from/to remote server</title>
      <link>http://blog.orangeiceberg.com/posts/copy-and-sync-files-from/to-remote-server</link>
      <pubDate>Mon, 07 Nov 2016 16:55:52 +0200</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/copy-and-sync-files-from/to-remote-server</guid>
      <description>

&lt;p&gt;Most modern web app deployments have automated scripts that perform all tasks needed to deploy the app. They handle all the dirty details, while the developer just needs to do something simple like &lt;code&gt;cap deploy&lt;/code&gt;. In other words, usually you don&amp;rsquo;t need to access the remote servers directly.&lt;/p&gt;

&lt;p&gt;However, sometimes you run into one-time tasks (or less frequent tasks) that might not have been automated. For example, dumping production data and importing on local machine, syncing uploaded files between production and staging environments, etc.&lt;/p&gt;

&lt;p&gt;These often involve transferring files between your local machine and remote server (or two remote servers). There are few ways you can handle this depending on what you need to transfer between servers. We are going to cover methods using &lt;code&gt;wget&lt;/code&gt;, &lt;code&gt;scp&lt;/code&gt;, and &lt;code&gt;rsync&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;wget:a9ea2420ab5888270878b6e98c285bbf&#34;&gt;wget&lt;/h2&gt;

&lt;p&gt;Simplest option is to install &lt;code&gt;wget&lt;/code&gt; on destination machine. &lt;code&gt;wget&lt;/code&gt; is the non-interactive network downloader and you just give it the URL of the file you want to download.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wget http://example.com/some/archive.tar.gz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That would download the file to current directory.&lt;/p&gt;

&lt;p&gt;The downside is that you have to put the file somewhere accessible via web, like &lt;code&gt;public&lt;/code&gt; dir in Rails apps and also you should remember to remove it once you are done with it.&lt;/p&gt;

&lt;p&gt;Also this only works if you have a single file, or you are able to create a single file (most likely by &lt;a href=&#34;http://blog.orangeiceberg.com/posts/create-and-extract-archives-using-tar-and-gzip/&#34;&gt;creating an archive using tar and gzip&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;scp:a9ea2420ab5888270878b6e98c285bbf&#34;&gt;scp&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;scp&lt;/code&gt; is a remote file copy program and the name is short for &lt;strong&gt;s&lt;/strong&gt;ecure &lt;strong&gt;c&lt;/strong&gt;o&lt;strong&gt;p&lt;/strong&gt;y. It&amp;rsquo;s very similar to usual &lt;code&gt;cp&lt;/code&gt; command with the difference that it&amp;rsquo;s able to copy files across different computers using SSH.&lt;/p&gt;

&lt;p&gt;Simplest forms of &lt;code&gt;scp&lt;/code&gt; have source and destination, both of which can be either a local file or a remote file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# copy file from server to current dir on local machine
scp myuser@example.com:/home/myuser/databasedump.sql ./

# copy file to remote server
scp ./some/localfile.txt myuser@example.com:/home/myuser/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a sense it works exactly like &lt;code&gt;cp&lt;/code&gt;. Difference is that when specifying a remote file the format looks like you concatenated SSH user@server string and normal file path (you are saying &amp;ldquo;as user at server get this file&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;There are some additional nice things about &lt;code&gt;scp&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you can use &lt;code&gt;-r&lt;/code&gt; option which will recursively copy entire directories.&lt;/li&gt;
&lt;li&gt;you can specify two remote files and it will copy them between remote servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;rsync:a9ea2420ab5888270878b6e98c285bbf&#34;&gt;rsync&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;scp&lt;/code&gt; is secure version of &lt;code&gt;rcp&lt;/code&gt; (remote copy) program. &lt;code&gt;rsync&lt;/code&gt; is faster, flexible replacement for &lt;code&gt;rcp&lt;/code&gt;. It copies files either to or from a remote host, or locally on the current host (it does not support copying files between two remote hosts).&lt;/p&gt;

&lt;p&gt;There are many ways you can use &lt;code&gt;rsync&lt;/code&gt;. The most usual variants are:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# copy all files recursively from one local dir to another
rsync ./source_dir ./destination_dir

# copy a file from local dir to remote server
rsync -Pavz ./archive.tar.gz myuser@example.com:/home/myuser/somedata/


# copy all files recursively from remote server to local dir
rsync -Pavz myuser@example.com:/home/myuser/somedata ./data

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Options that were used are not strictly necessary for doing stated tasks, but they help. They are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;P&lt;/code&gt; - same as &amp;ndash;partial &amp;ndash;progress. It means it will show transfer progress and if transfer breaks keep a partial copy to possibly continue on retry. Very useful for large files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; - it is a quick way of saying you want recursion and want to preserve almost everything. This is equivalent to -rlptgoD.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt; - be verbose.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;z&lt;/code&gt; - compress file data during the transfer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I suggest that you consult &lt;code&gt;man rsync&lt;/code&gt; for more details.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Backup and Restore a PostgreSQL Database</title>
      <link>http://blog.orangeiceberg.com/posts/backup-and-restore-a-postgresql-database</link>
      <pubDate>Tue, 18 Oct 2016 07:05:38 +0200</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/backup-and-restore-a-postgresql-database</guid>
      <description>

&lt;p&gt;While working on different projects and in different environments, we often need to export a dump from one database and then import it into another. A while ago &lt;a href=&#34;http://http://orangeiceberg.com/about/&#34; title=&#34;About Slobodan&#34;&gt;Slobodan&lt;/a&gt; wrote how to &lt;a href=&#34;http://icebergist.com/posts/import-and-export-mysql-dump/&#34; title=&#34;Import and Export mySQL dump&#34;&gt;export and import a mySQL dump&lt;/a&gt;, and here is a guide how do it for PostgreSQL.&lt;/p&gt;

&lt;h2 id=&#34;export-a-postgresql-database-dump:84d8e3d5c8f415260e623e37a1cf3f9b&#34;&gt;Export a PostgreSQL database dump&lt;/h2&gt;

&lt;p&gt;To export PostgreSQL database we will need to use the &lt;a href=&#34;https://www.postgresql.org/docs/current/static/backup-dump.html&#34; title=&#34;PostgreSQL&#34;&gt;pg_dump&lt;/a&gt; tool, which will dump all the contents of a selected database into a single file.
We need to run &lt;code&gt;pg_dump&lt;/code&gt; in the command line on the computer where the database is stored. So, if the database is stored on a remote server, you will need to SSH to that server in order to run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pg_dump -U db_user -W -F t db_name &amp;gt; /path/to/your/file/dump_name.tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we used the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-U&lt;/code&gt; to specify which user will connect to the PostgreSQL database server.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-W&lt;/code&gt; or &lt;code&gt;--password&lt;/code&gt; will force pg_dump to prompt for a password before connecting to the server.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-F&lt;/code&gt; is used to specify the format of the output file, which can be one of the following:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; - plain-text SQL script&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; - custom-format archive&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; - directory-format archive&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt; - tar-format archive&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;sup&gt;&lt;em&gt;custom&lt;/em&gt;, &lt;em&gt;directory&lt;/em&gt; and &lt;em&gt;tar&lt;/em&gt; formats are suitable for input into pg_restore.&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;To see a list of all the available options use &lt;code&gt;pg_dump -?&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With given options &lt;code&gt;pg_dump&lt;/code&gt; will first prompt for a password for the database user &lt;code&gt;db_user&lt;/code&gt; and then connect as that user to the database named &lt;code&gt;db_name&lt;/code&gt;. After it successfully connects, &lt;code&gt;&amp;gt;&lt;/code&gt; will write the output produced by pg_dump to a file with a given name, in this case &lt;code&gt;dump_name.tar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;File created in the described process contains all the SQL queries that are required in order to replicate your database.&lt;/p&gt;

&lt;h2 id=&#34;import-a-postgresql-database-dump:84d8e3d5c8f415260e623e37a1cf3f9b&#34;&gt;Import a PostgreSQL database dump&lt;/h2&gt;

&lt;p&gt;There are two ways to restore a PostgreSQL database:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;psql&lt;/code&gt; for restoring from a plain SQL script file created with &lt;code&gt;pg_dump&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pg_restore&lt;/code&gt; for restoring from a .tar file, directory, or custom format created with &lt;code&gt;pg_dump&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;1-restore-a-database-with-psql:84d8e3d5c8f415260e623e37a1cf3f9b&#34;&gt;1. Restore a database with psql&lt;/h3&gt;

&lt;p&gt;If your backup is a plain-text file containing SQL script, then you can restore your database by using &lt;a href=&#34;https://www.postgresql.org/docs/current/static/app-psql.html&#34;&gt;PostgreSQL interactive terminal&lt;/a&gt;, and running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;psql -U db_user db_name &amp;lt; dump_name.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;db_user&lt;/code&gt; is the database user, &lt;code&gt;db_name&lt;/code&gt; is the database name, and &lt;code&gt;dump_name.sql&lt;/code&gt; is the name of your backup file.&lt;/p&gt;

&lt;h3 id=&#34;2-restore-a-database-with-pg-restore:84d8e3d5c8f415260e623e37a1cf3f9b&#34;&gt;2. Restore a database with pg_restore&lt;/h3&gt;

&lt;p&gt;If you choose custom, directory, or archive format when creating a backup file, then you will need to use pg_restore in order to restore your database:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pg_restore -d db_name /path/to/your/file/dump_name.tar -c -U db_user&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you use pg_restore you have various options available, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt; to drop database objects before recreating them,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-C&lt;/code&gt; to create a database before restoring into it,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt; exit if an error has encountered,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-F format&lt;/code&gt; to specify the format of the archive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use &lt;code&gt;pg_restore -?&lt;/code&gt; to get the full list of available options.&lt;/p&gt;

&lt;p&gt;You can find more info on using mentioned tools by running &lt;code&gt;man pg_dump&lt;/code&gt;, &lt;code&gt;man psql&lt;/code&gt; and &lt;code&gt;man pg_restore&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Ransackers to search for a key in PostgreSQL JSON column</title>
      <link>http://blog.orangeiceberg.com/posts/using-ransackers-to-search-for-a-key-in-postgresql-json-column</link>
      <pubDate>Mon, 20 Jun 2016 12:39:42 +0200</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/using-ransackers-to-search-for-a-key-in-postgresql-json-column</guid>
      <description>&lt;p&gt;Starting with v9.2, PostgreSQL added native JSON support which enabled us to take advantage of some benefits that come with NoSQL database within a traditional relational database such as PostgreSQL.&lt;/p&gt;

&lt;p&gt;While working on a Ruby on Rails application that used PostgreSQL database to store data, we came a across an issue where we needed to implement a search by key within a JSON column.&lt;/p&gt;

&lt;p&gt;We were alredy using &lt;a href=&#34;https://github.com/activerecord-hackery/ransack&#34;&gt;Ransack&lt;/a&gt; for building search forms within the application, so we needed a way of telling Ransack to perform a search by given key in our JSON column.&lt;/p&gt;

&lt;p&gt;This is where &lt;a href=&#34;https://github.com/activerecord-hackery/ransack/wiki/using-ransackers&#34;&gt;Ransackers&lt;/a&gt; come in.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The premise behind Ransack is to provide access to Arel predicate methods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can find more information on Arel &lt;a href=&#34;https://github.com/rails/arel&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In our case we needed to perform a search within &lt;code&gt;transactions&lt;/code&gt; table and &lt;code&gt;payload&lt;/code&gt; JSON column, looking for records containing a key called &lt;code&gt;invoice_number&lt;/code&gt;. To achieve this we added the following ransacker to our &lt;code&gt;Transaction&lt;/code&gt; model&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ransacker :invoice_number do |parent|
   Arel::Nodes::InfixOperation.new(&#39;-&amp;gt;&amp;gt;&#39;, parent.table[:payload], &#39;invoice_number&#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now with our search set on &lt;code&gt;link_type_cont&lt;/code&gt; (cont being just one of Ransack available search predicates), if the user entered for example  &lt;code&gt;123&lt;/code&gt; in the search filed, it would generate a query like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT  &amp;quot;transactions&amp;quot;.* FROM &amp;quot;transactions&amp;quot;  WHERE (&amp;quot;transactions&amp;quot;.&amp;quot;payload&amp;quot; -&amp;gt;&amp;gt; &#39;invoice_number&#39; ILIKE &#39;%123%&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;basically performing a search for records in &lt;code&gt;transactions&lt;/code&gt; table that have a key called &lt;code&gt;invoice_number&lt;/code&gt; with value containing a string &lt;code&gt;123&lt;/code&gt;, within a JSON column &lt;code&gt;payload&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Show part of a Rails template in other locale</title>
      <link>http://blog.orangeiceberg.com/posts/show-part-of-a-rails-template-in-other-locale</link>
      <pubDate>Mon, 30 May 2016 10:06:00 +0200</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/show-part-of-a-rails-template-in-other-locale</guid>
      <description>

&lt;p&gt;I recently worked on a Rails project, which had parts of pages in different languages. That may be a problem if you have already translated their entire text to all required languages. You can even be tempted to hardcode parts of the text into other languages. Fortunately, there is an elegant way to solve that problem, just wrap parts of template or partials into blocks with desired locale, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;% I18n.with_locale(&#39;en&#39;) do %&amp;gt;
  ...part of your template
  or
  &amp;lt;%= render partial: &#39;some/partial&#39; %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example:87119108ea1faf72eb52a6c753eb4dc7&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Suppose, there is a template with only header and two paragraphs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;h1&amp;gt;&amp;lt;%= t(&#39;my_great_header&#39;) %&amp;gt;&amp;lt;/h1&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;%= t(&#39;first_paragraph&#39;) %&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;%= t(&#39;second_paragraph&#39;) %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And locale in English and French for that template.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# in config/locales/en.yml
en:
  my_great_header: &amp;quot;My English great header&amp;quot;
  first_paragraph: &amp;quot;First English paragraph&amp;quot;
  second_paragraph: &amp;quot;Second English paragraph&amp;quot;

# in config/locales/fr.yml
fr:
  my_great_header: &amp;quot;My French great header&amp;quot;
  first_paragraph: &amp;quot;First French paragraph&amp;quot;
  second_paragraph: &amp;quot;Second French paragraph&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And client wants first paragraph to always be in English.&lt;/p&gt;

&lt;p&gt;Just wrap first paragraph in block with locale &lt;code&gt;&#39;en&lt;/code&gt;, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;&amp;lt;%= t(&#39;my_great_header&#39;) %&amp;gt;&amp;lt;/h1&amp;gt;

&amp;lt;% I18n.with_locale(&#39;en&#39;) do %&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;%= t(&#39;first_paragraph&#39;) %&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;% end %&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;%= t(&#39;second_paragraph&#39;) %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and when you switch language to Franch result will be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;My French great header

First English paragraph

Second French paragraph
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope that this helps. Have a nice day.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploying Rails app with Capistrano 3</title>
      <link>http://blog.orangeiceberg.com/posts/deploying-rails-app-with-capistrano-3</link>
      <pubDate>Wed, 25 May 2016 10:42:17 +0200</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/deploying-rails-app-with-capistrano-3</guid>
      <description>

&lt;p&gt;In the lifetime of every application the time comes for it to be presented to everyone. That&amp;rsquo;s why we have to put our application on a special server which is designed for this purpose. In one word, we need to &lt;strong&gt;deploy&lt;/strong&gt; our application. In this post you will see how to deploy app with &lt;a href=&#34;http://www.capistranorb.com/&#34;&gt;Capistrano 3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Capistrano is a great developers tool that is used to automatically deploy projects to remote server.&lt;/p&gt;

&lt;h3 id=&#34;add-capistrano-to-rails-app:5a134459841b76e99627f89a0f6507b6&#34;&gt;Add Capistrano to Rails app&lt;/h3&gt;

&lt;p&gt;I will assume you already have a server set up and an application ready to be deployed remotely.&lt;/p&gt;

&lt;p&gt;We will use gem &lt;a href=&#34;https://github.com/capistrano/rails&#34;&gt;&amp;lsquo;capistrano-rails&amp;rsquo;&lt;/a&gt;, so we need to add this gems to Gemfile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :development do
  gem &#39;capistrano&#39;, &#39;~&amp;gt; 3.5&#39;
  gem &#39;capistrano-rails&#39;, &#39;~&amp;gt; 1.1.6&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and install gems with &lt;code&gt;$ bundle install&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;initialize-capistrano:5a134459841b76e99627f89a0f6507b6&#34;&gt;Initialize Capistrano&lt;/h3&gt;

&lt;p&gt;Then run the following command to create configuration files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle exec cap install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command  creates all the necessary configuration files and directory structure with two stages, staging and production:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Capfile
config/deploy.rb
config/deploy/production.rb
config/deploy/staging.rb
lib/capistrano/tasks
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;require-needed-gems-in-capfile:5a134459841b76e99627f89a0f6507b6&#34;&gt;Require needed gems in Capfile&lt;/h3&gt;

&lt;p&gt;Open the &lt;code&gt;Capfile&lt;/code&gt; and add or uncomment this lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capistrano/setup&#39;
require &#39;capistrano/deploy&#39;
require &#39;capistrano/bundler&#39;
require &#39;capistrano/rails/assets&#39;
require &#39;capistrano/rails/migrations&#39;
Dir.glob(&#39;lib/capistrano/tasks/*.rake&#39;).each { |r| import r }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;add-capistrano-rbenv-gem:5a134459841b76e99627f89a0f6507b6&#34;&gt;Add capistrano-rbenv gem&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/capistrano/rbenv&#34;&gt;capistrano-rbenv&lt;/a&gt; gem provides rbenv support for Capistrano 3.&lt;/p&gt;

&lt;p&gt;Add this line to the Gemfile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :development do
  gem &#39;capistrano&#39;, &#39;~&amp;gt; 3.5&#39;
  gem &#39;capistrano-rails&#39;, &#39;~&amp;gt; 1.1.6&#39;
  gem &#39;capistrano-rbenv&#39;, &#39;~&amp;gt; 2.0&#39;, require: false
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And require this gem in Capfile &lt;code&gt;require &#39;capistrano/rbenv&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;add-capistrano-passenger-gem:5a134459841b76e99627f89a0f6507b6&#34;&gt;Add capistrano-passenger gem&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/capistrano/passenger&#34;&gt;capistrano-passenger&lt;/a&gt; gem adds a task to restart your application after deployment via Capistrano.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :development do
  ...
  gem &#39;capistrano-rbenv&#39;, &#39;~&amp;gt; 2.0&#39;, require: false
  gem &#39;capistrano-passenger&#39;, &#39;~&amp;gt; 0.2.0&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And require this gem in Capfile &lt;code&gt;require &#39;capistrano/passenger&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;configure-deploy-rb-file:5a134459841b76e99627f89a0f6507b6&#34;&gt;Configure deploy.rb file&lt;/h3&gt;

&lt;p&gt;Open &lt;code&gt;config/deploy.rb&lt;/code&gt; and add options for deployment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;set all needed variables, this is the variant with two servers (&lt;em&gt;staging and production&lt;/em&gt;) and with user created on server (&lt;em&gt;server setup is theme for different post&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :application, &#39;app-name&#39;   # application name
set :deploy_user, &#39;user-name&#39;   # name of user who is set on server
set :repo_url, &#39;git@github.com:nickname/repo_name.git&#39;   # your repository url from github
set :branch, ENV.fetch(&#39;BRANCH&#39;, &#39;master&#39;)   # branch which you want to deploy from
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;set the path where you want to find your app on server, starting from server&amp;rsquo;s root&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :deploy_to, -&amp;gt; { &amp;quot;/path/to/app/#{fetch(:rails_env)}-#{fetch(:application)}&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;set config files, Capistrano uses a folder called shared to manage files and directories that should persist across releases&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :linked_files, fetch(:linked_files, []).push(&#39;config/database.yml&#39;, &#39;config/secrets.yml&#39;)

set :linked_dirs, fetch(:linked_dirs, []).push(&#39;log&#39;, &#39;tmp/pids&#39;, &#39;tmp/cache&#39;, &#39;tmp/sockets&#39;, &#39;vendor/bundle&#39;, &#39;public/system&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;set ruby version, we use &lt;code&gt;gem &#39;capistrano-rbenv&#39;&lt;/code&gt; for this setup&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :rbenv_type, :user
set :rbenv_ruby, &#39;2.2.2&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;set option for restarting your application after deployment with &lt;code&gt;gem &#39;capistrano-passenger&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :passenger_restart_with_touch, true
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;here you can put all kinds of rake tasks for different needs that you can run every time when you deploy your application.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;namespace :deploy do
  desc &amp;quot;Description of task&amp;quot;
  task :name_of_task do
      # do something
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;capistrano-s-server-settings:5a134459841b76e99627f89a0f6507b6&#34;&gt;Capistrano&amp;rsquo;s server settings&lt;/h3&gt;

&lt;p&gt;You need to tell Capistrano where to find your server.
This is an example of server&amp;rsquo;s settings for application where everything is on same machine (application, server, database).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;config/deploy/staging&lt;/code&gt; set:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;server &#39;your.staging.server.com&#39;, user: fetch(:deploy_user), roles: %w{app db web}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;and set rails environment&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :rails_env, &#39;staging&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also set the same configuration for production server.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;config/deploy/production&lt;/code&gt; add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;server &#39;your.production.server.com&#39;, user: fetch(:deploy_user), roles: %w{app db web}
set :rails_env, &#39;production&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;deploy-your-application:5a134459841b76e99627f89a0f6507b6&#34;&gt;Deploy your application&lt;/h3&gt;

&lt;p&gt;Just run &lt;code&gt;deploy&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle exec cap staging deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle exec cap production deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and that is it, your app is live and you can visit it on server&amp;rsquo;s name url, in our example case &lt;em&gt;your.staging.server.com&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Note: you can find complete documentation on &lt;a href=&#34;http://capistranorb.com/&#34;&gt;Capistrano site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have a nice day!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>rake db:schema:load vs rake db:migrate</title>
      <link>http://blog.orangeiceberg.com/posts/rake-dbschemaload-vs-rake-dbmigrate</link>
      <pubDate>Thu, 24 Mar 2016 08:09:25 +0100</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/rake-dbschemaload-vs-rake-dbmigrate</guid>
      <description>

&lt;p&gt;Sooner or later every new Ruby developer needs to understand  differences between this two common rake tasks. Basically, these simple definition tells us everything we need to know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rake db:migrate&lt;/code&gt; runs migrations that have not run yet&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rake db:schema:load&lt;/code&gt; loads the schema.db file into database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;but the real question is when to use one or the other.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advice:&lt;/strong&gt; &lt;a id=&#34;advice&#34;&gt;&lt;/a&gt; when you are adding a new migration to an existing app then you need to run &lt;code&gt;rake db:migrate&lt;/code&gt;, but when you join to existing application (&lt;em&gt;especially some old application&lt;/em&gt;), or when you drop your applications database and you need to create it again, always run &lt;code&gt;rake db:schema:load&lt;/code&gt; to load schema.&lt;/p&gt;

&lt;h3 id=&#34;example:bb0863f1c1f426893f44d7c5e616b367&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;I am working on application which use &lt;a href=&#34;https://github.com/globalize/globalize&#34;&gt;globalize gem&lt;/a&gt; for ActiveRecord model/data translations. Globalize work this way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first specify attributes which need to be translatable&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Post &amp;lt; ActiveRecord::Base
  translates :title, :text
end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;then create translation tables&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CreatePosts &amp;lt; ActiveRecord::Migration
  def up
    create_table :posts do |t|
      t.timestamps
    end
    Post.create_translation_table! title: :string, text: :text
  end
  def down
    drop_table :posts
    Post.drop_translation_table!
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; &lt;em&gt;that the ActiveRecord model Post must already exist and have listed attributes for translations&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;and run &lt;code&gt;rake db:migrate&lt;/code&gt; .&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Problem comes when you change your mind and decide to leave title to be untranslatable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;remove title from post translations table&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class RemoveTitleFromPostTranslations &amp;lt; ActiveRecord::Migration
  def up
    remove_column :post_translations, :title, :string
  end

  def down
    Entry.add_translation_fields! title: :string
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;add title to posts table&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddTitleToPosts &amp;lt; ActiveRecord::Migration
  def change
    add_column :posts, :title, :string
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;remove title attribute from model translations&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Post &amp;lt; ActiveRecord::Base
  translates :text
end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;and run &lt;code&gt;rake db:migrate&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everything looking good, so where is the problem?&lt;/p&gt;

&lt;p&gt;Here it is! If you decide to delete your database and create it again you need to use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rake db:drop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rake db:create&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rake db:schema:load&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because, if you try to use &lt;code&gt;rake db:migrate&lt;/code&gt; instead of &lt;code&gt;rake db:schema:load&lt;/code&gt; you will get &lt;strong&gt;BIG ERROR!&lt;/strong&gt;, because for your first migration &amp;ldquo;create_posts&amp;rdquo; it is necessary that you have defined translatable attributes :title and :text in Post model, but you removed :title from Post model translations.&lt;/p&gt;

&lt;p&gt;So just follow &lt;a href=&#34;#advice&#34;&gt;advice&lt;/a&gt; above, and good luck.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Headless Firefox in Ubuntu on VirtualBox for Cucumber testing</title>
      <link>http://blog.orangeiceberg.com/posts/headless-firefox-in-ubuntu-on-virtualbox-for-cucumber-testing</link>
      <pubDate>Thu, 03 Dec 2015 11:12:56 +0200</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/headless-firefox-in-ubuntu-on-virtualbox-for-cucumber-testing</guid>
      <description>

&lt;p&gt;If you use &lt;a href=&#34;http://www.vagrantup.com/downloads.html&#34;&gt;Vagrant&lt;/a&gt;, &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt; and Ubuntu to build your Rails apps and you want to test it with Cucumber scenarios, this is the right post for you. By default Vagrant and VirtualBox use Ubuntu without an X server and GUI.&lt;/p&gt;

&lt;p&gt;Everything goes well until you need &lt;code&gt;@javascript&lt;/code&gt; flag for your cucumber scenario. &lt;code&gt;@javascript&lt;/code&gt; uses a javascript-aware system to process web requests (e.g. Selenium) instead of the default (non-javascript-aware) webrat browser.&lt;/p&gt;

&lt;h3 id=&#34;install-mozilla-firefox:e440c2a4f60085f5f973ab25c52a888b&#34;&gt;Install Mozilla Firefox&lt;/h3&gt;

&lt;p&gt;Selenium WebDriver is flexible and lets you run selenium headless in servers with no display. But in order to run, Selenium needs to launch a browser. If there is no display to the machine, the browsers are not launched. So in order to use selenium, you need to fake a display and let selenium and the browser think they are running in a machine with a display.&lt;/p&gt;

&lt;p&gt;Install latest version of Mozilla Firefox:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt-get install firefox&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since Ubuntu is running without a X server Selenium cannot start Firefox because it requires an X server.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-virtual-x-server:e440c2a4f60085f5f973ab25c52a888b&#34;&gt;Setting up virtual X server&lt;/h3&gt;

&lt;p&gt;Virtual X server is required to make browsers run normally by making them believe there is a display available, although it doesn&amp;rsquo;t create any visible windows.&lt;/p&gt;

&lt;p&gt;Xvfb (X Virtual FrameBuffer) works fine for this. Xvfb lets you run X-Server in machines with no display devices.&lt;/p&gt;

&lt;p&gt;Install xvfb on ubuntu:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt-get install xvfb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lets run the Xvfb service in a display number which is less likely to clash even if you add a display at a later stage. Display 10 will do fine.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo Xvfb :10 -ac&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The parameter -ac makes xvfb run with access control off. The server should be running now.&lt;/p&gt;

&lt;h3 id=&#34;headless-firefox:e440c2a4f60085f5f973ab25c52a888b&#34;&gt;Headless Firefox&lt;/h3&gt;

&lt;p&gt;Before you can run a browser, you need to set the environment variable DISPLAY with the display number at which xvfb is running.&lt;/p&gt;

&lt;p&gt;Open new tab in terminal and set the DISPLAY variable:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export DISPLAY=:10&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and start mozilla firefox:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;firefox&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you run firefox headlessly in Ubuntu, and you can run your cucumber scenarios with &lt;code&gt;@javascript&lt;/code&gt; flag.&lt;/p&gt;

&lt;h3 id=&#34;start-virtual-x-server-automatically:e440c2a4f60085f5f973ab25c52a888b&#34;&gt;Start virtual X server automatically&lt;/h3&gt;

&lt;p&gt;To run your X server automatically, after installing Xvfb, you will need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;put content of &lt;a href=&#34;https://gist.github.com/basti/2db0b71e893ee4d6d015&#34;&gt;this gist&lt;/a&gt; in &lt;code&gt;/etc/init.d/xvfb&lt;/code&gt; (hint use &lt;code&gt;sudo wget&lt;/code&gt; command to do that)&lt;/li&gt;
&lt;li&gt;make it executable &lt;code&gt;sudo chmod a+x /etc/init.d/xvfb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;start xvfb on display number 10 &lt;code&gt;export DISPLAY=:10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;run X server &lt;code&gt;sudo /etc/init.d/xvfb start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;when you want to stop X server &lt;code&gt;sudo /etc/init.d/xvfb stop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is my way to run firefox headlessly in Virtual box Ubuntu, and to run cucumber scenarios with &lt;code&gt;@javascript&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.installationpage.com/selenium/how-to-run-selenium-headless-firefox-in-ubuntu/&#34;&gt;Selenium Headless Automated Testing in Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/jterrace/2911875&#34;&gt;Xvfb init script for Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Import and export MySQL dump</title>
      <link>http://blog.orangeiceberg.com/posts/import-and-export-mysql-dump</link>
      <pubDate>Wed, 02 Dec 2015 10:44:23 +0100</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/import-and-export-mysql-dump</guid>
      <description>&lt;p&gt;Another simple task that&amp;rsquo;s often hard for beginners is importing and exporting MySQL dumps. Here is quick rundown on how to do it.&lt;/p&gt;

&lt;p&gt;To export data you need to use &lt;code&gt;mysqldump&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mysqldump -u db_user -p db_name &amp;gt; dump_name.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Options given to &lt;code&gt;mysqldump&lt;/code&gt; are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-u db_user&lt;/code&gt; - connect as user &lt;code&gt;db_user&lt;/code&gt; to database&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt; - use password, it will ask you to enter your password&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db_name&lt;/code&gt; is the name of MySQL database you want to dump&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt; dump_name.sql&lt;/code&gt; - by default &lt;code&gt;mysqldump&lt;/code&gt; will print out the dump to terminal, but simple output redirect with &lt;code&gt;&amp;gt;&lt;/code&gt; will instead write it to given filename, in this case &lt;code&gt;dump_name.sql&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you have &lt;code&gt;dump_name.sql&lt;/code&gt; file with all SQL queries needed to replicate your database you can import it using general-purpose &lt;code&gt;mysql&lt;/code&gt; client:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mysql -u db_user -p db_name &amp;lt; dump_name.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;User, password, and database name options are the same as for &lt;code&gt;mysqldump&lt;/code&gt;. Since &lt;code&gt;mysql&lt;/code&gt; reads input from terminal this time we can use &lt;code&gt;&amp;lt;&lt;/code&gt; to read input from given file instead.&lt;/p&gt;

&lt;p&gt;As always for more information you can consult manual using &lt;code&gt;man mysqldump&lt;/code&gt; and &lt;code&gt;man mysql&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create and extract archives using tar and gzip</title>
      <link>http://blog.orangeiceberg.com/posts/create-and-extract-archives-using-tar-and-gzip</link>
      <pubDate>Fri, 13 Nov 2015 13:28:36 +0100</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/create-and-extract-archives-using-tar-and-gzip</guid>
      <description>&lt;p&gt;One of the simplest tasks is creating and extracting files using &lt;code&gt;tar&lt;/code&gt; and &lt;code&gt;gzip&lt;/code&gt;. Yet for most new developers this is a daunting task. These days &lt;code&gt;tar&lt;/code&gt; is mostly used to simply combine a few files into a single file and then &lt;code&gt;gzip&lt;/code&gt; is used to compress that file.&lt;/p&gt;

&lt;p&gt;Here is a quick overview how to use &lt;code&gt;tar&lt;/code&gt; and &lt;code&gt;gzip&lt;/code&gt; to create and compress an archive:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# archive individual files
tar -cvzf myarchive.tar.gz /path/to/file1 /path/to/file2

# archive whole directory
tar -cvzf myarchive.tar.gz /path/to/dir

# archive whole directory but don&#39;t store full path
tar -cvzf myarchive.tar.gz -C /path/to/dir ./
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Options give to tar are: &lt;code&gt;c&lt;/code&gt; to create new archive, &lt;code&gt;v&lt;/code&gt; to be verbose, &lt;code&gt;z&lt;/code&gt; to compress resulting archive with &lt;code&gt;gzip&lt;/code&gt;, and &lt;code&gt;f&lt;/code&gt; to write the archive to specified file. After options you can list files and dirs you want to archive.&lt;/p&gt;

&lt;p&gt;In all examples we provide a full path to a file or dir we want to archive. In this case &lt;code&gt;tar&lt;/code&gt; will store files in the archive using the full path. This means once you extract the files you&amp;rsquo;ll have a complete directory structure from root dir onwards.&lt;/p&gt;

&lt;p&gt;The way to avoid this is either to manually &lt;code&gt;cd&lt;/code&gt; to dir in which files are stored, or to tell &lt;code&gt;tar&lt;/code&gt; using &lt;code&gt;C&lt;/code&gt; option to change dir before archiving files.&lt;/p&gt;

&lt;p&gt;Finally to extract an archive:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;tar -xvzf myarchive.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;x&lt;/code&gt; option tells &lt;code&gt;tar&lt;/code&gt; to extract the archive into current directory.&lt;/p&gt;

&lt;p&gt;For more information you can consult manual using &lt;code&gt;man tar&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating and publishing a ruby gem</title>
      <link>http://blog.orangeiceberg.com/posts/creating-and-publishing-a-ruby-gem</link>
      <pubDate>Mon, 08 Jun 2015 09:12:04 +0200</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/creating-and-publishing-a-ruby-gem</guid>
      <description>

&lt;p&gt;A gem is a simple way to distribute functionality, it can be a small plugin, a Ruby library or sometimes a whole program. Thanks to RubyGems, a gem hosting service, developers have a wide range of gems at their disposal allowing them to easily add functionality to their applications.&lt;/p&gt;

&lt;p&gt;But what if there is no gem available that will suit the functionality you need, and you find yourself writing the same code over and over again for different projects? Well, in that case you should consider making your own gem.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s considered a good practice to extract a gem out of an existing application, since that way you will have a better understanding of all the requirements as well as how the gem will be used. This blog post will illustrate just that on a real life example, and will take you through the process of creating a slug_converter gem.&lt;/p&gt;

&lt;h3 id=&#34;slug-converter-gem:26b86b95592661b7092ab782e8d51bcd&#34;&gt;Slug converter gem&lt;/h3&gt;

&lt;p&gt;Source code for slug_converter gem was developed while working on a link shortener application, in order to generate a string consisting of predefined characters, based on a given id number of a link. As it will be described in this blog post, this code was easily extracted from the application into an independent gem that was released on  RubyGems.&lt;/p&gt;

&lt;p&gt;Although it may seem like a complex task at first, creating a gem is not that difficult, if you have RubyGems and Bundler installed you are good to go. We already know what RubyGems is, and Bundler is a package manager that determines a full set of direct dependencies needed by your application.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s build a gem!&lt;/p&gt;

&lt;h3 id=&#34;creating-a-gem:26b86b95592661b7092ab782e8d51bcd&#34;&gt;Creating a gem&lt;/h3&gt;

&lt;p&gt;First step is to make sure that bundler gem is installed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gem install bundler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;once bundler is installed creating a structure for your new gem is easy,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bundle gem slug_converter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first time you use bundler to create a gem you will be prompted to answer a couple of questions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Do you want to include code of conduct in your gems you generate?
Do you want to licence your code permissively under the MIT licence?
Do you want to generate tests with your gem?
Type rspec or minitest to generate those tests files now and in the future:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Answering these questions will help bundler configure and setup files that are being generated now and in the future. Here we answered yes to first 4 qestions and choose rspec for testing.&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;$ bundle gem slug_converter&lt;/code&gt; command resulted with &amp;ldquo;slug_converter&amp;rdquo; directory with essential gem file structure being created, and git repository initialized, assuming that you are using git for version management (as you should).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Creating gem &#39;slug_converter&#39;...
 create  slug_converter/Gemfile
 create  slug_converter/.gitignore
 create  slug_converter/lib/slug_converter.rb
 create  slug_converter/lib/slug_converter/version.rb
 create  slug_converter/slug_converter.gemspec
 create  slug_converter/Rakefile
 create  slug_converter/README.md
 create  slug_converter/bin/console
 create  slug_converter/bin/setup
 create  slug_converter/LICENSE.txt
 create  slug_converter/.travis.yml
 create  slug_converter/.rspec
 create  slug_converter/spec/spec_helper.rb
 create  slug_converter/spec/slug_converter_spec.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s go through files that bundler generated for us, .gemspec file is the &amp;ldquo;heart&amp;rdquo; of your gem so lets start with &lt;code&gt;slug_converter.gemspec&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;lib = File.expand_path(&#39;../lib&#39;, __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require &#39;slug_converter/version&#39;

Gem::Specification.new do |spec|
  spec.name         = &amp;quot;slug_converter&amp;quot;
  spec.version      = SlugConverter::VERSION
  spec.authors      = [&amp;quot;Your Name&amp;quot;]
  spec.email        = [&amp;quot;youremail@example.com&amp;quot;]

  # if spec.respond_to?(:metadata)
  #   spec.metadata[&#39;allowed_push_host&#39;] = &amp;quot;TODO: Set to &#39;http://mygemserver.com&#39; to prevent pushes to rubygems.org, or delete to allow pushes to any server.&amp;quot;
  # end

  spec.summary      = %q{Number &amp;lt;-&amp;gt; Slug converter}
  spec.description  = %q{Generates a slug based on the given number and the other way around}
  spec.homepage     = &amp;quot;https://github.com/orangeiceberg/slug_converter&amp;quot;
  spec.license      = &amp;quot;MIT&amp;quot;

  spec.files        = `git ls-files -z`.split(&amp;quot;\x0&amp;quot;).reject { |f| f.match(%r{^(test|spec|features)/}) }
  spec.bindir       = &amp;quot;exe&amp;quot;
  spec.executables  = spec.files.grep(%r{^exe/}) { |f| File.basename(f) }
  spec.require_paths= [&amp;quot;lib&amp;quot;]

  spec.add_development_dependency &amp;quot;bundler&amp;quot;, &amp;quot;~&amp;gt; 1.8&amp;quot;
  spec.add_development_dependency &amp;quot;rake&amp;quot;, &amp;quot;~&amp;gt; 10.0&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This file contains metadata about your gem and it can be populated directly, so here you can enter all the data such as name, description, licence&amp;hellip; This file also contains information about what files should be packaged in your gem, as well as the load path to include the gem directory when the gem is first loaded. Most of these default settings will work for the majority of gems but you can always edit them if you want different behavior. At the bottom of the file add any gem dependencies that are required.&lt;/p&gt;

&lt;p&gt;The version number of the gem is set in &lt;code&gt;SlugConverter::VERSION&lt;/code&gt; constant which is kept in a separate version.rb file, and you can change it there for every new version of your gem.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lib
 |--slug_converter
         |--version.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A very important part of every gem is the &lt;code&gt;README&lt;/code&gt; file, where you can describe how to install and use the gem, and the &lt;code&gt;LICENCE&lt;/code&gt; file where you can define the terms and conditions under which the gem can be used.&lt;/p&gt;

&lt;p&gt;In the lib directory there is a file which has the same name as your gem (recommended), and that file will be loaded when someone requires your gem. If the gem you are writing is simple all the code can be placed in this single file, or in case of more complex gems all the other files from the lib directory are required in this file.&lt;/p&gt;

&lt;p&gt;There is also a &lt;code&gt;Gemfile&lt;/code&gt; generated, but this file doesn&amp;rsquo;t have to be managed directly since all it does is look in &lt;code&gt;.gemspec&lt;/code&gt; for required dependencies and then loads them through bundler. All the dependencies required by the gem should be specified in the &lt;code&gt;.gemspec&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Another file that is generated by the bundler is &lt;code&gt;Rakefile&lt;/code&gt; which just adds some gem tasks from bundler, and we can see those tasks with explanation by running&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rake -T
rake build    # Build slug_converter-0.0.1.gem into the pkg directory
rake install  # Build and install slug_converter-0.0.1.gem into system gems
rake release  # Create tag v0.0.1 and build and push slug_converter-0.1.0.gem to Rubygems
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;writing-tests:26b86b95592661b7092ab782e8d51bcd&#34;&gt;Writing tests&lt;/h3&gt;

&lt;p&gt;If you are following the principles of Test Driven Development you will probably like to start by writing tests for you gem, for that purpose I would suggest using RSpec.
To do that you will need to add rspec as a development dependency to you gemspec file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spec.add_development_dependency &#39;rspec&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As mentioned in the beginning, when running bundle gem for the first time, bundler will asks if you would like to generate test files for your gem and to choose if you want to use rspec or minitest. If you answer with yes, and choose rspec, bundler will generate a spec directory with two files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|-- spec
      |-- slug_converter_spec.rb
      |-- spec_helper.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;code&gt;spec_helper.rb&lt;/code&gt; file you can reference any test globals or configuration.&lt;/p&gt;

&lt;p&gt;Since we are extracting code from an existing application we already have all the tests written so we just need to copy them into the generated &lt;code&gt;spec/slug_converter_spec.rb&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;spec_helper&#39;
describe SlugConverter do
  it &#39;has a version number&#39; do
    expect(SlugConverter::VERSION).not_to be nil
  end
  describe &amp;quot;.number&amp;quot; do

    it &amp;quot;returns number when number is set&amp;quot; do
      converted_slug= SlugConverter.new(111)
      expect(converted_slug.number).to eq(111)
    end

    it &amp;quot;returns decoded number for existing slug&amp;quot; do
      converted_slug = SlugConverter.new(&amp;quot;vg&amp;quot;)
      expect(converted_slug.number).to eq(363)
    end

  end

  describe &amp;quot;.number&amp;quot; do

    it &amp;quot;sets number to given value&amp;quot; do
      converted_slug = SlugConverter.new(211)
      expect(converted_slug.number=210).to eq(210)
    end

    it &amp;quot;sets slug to encoded value of number&amp;quot; do
      converted_slug = SlugConverter.new(211)
      converted_slug.number=210
      expect(converted_slug.slug).to eq(&amp;quot;pb&amp;quot;)
    end

    it &amp;quot;sets number to integer value of given number passed as string&amp;quot; do
      converted_slug = SlugConverter.new(&amp;quot;210&amp;quot;)
      expect(converted_slug.number).to eq(210)
    end

    it &amp;quot;sets slug to encoded value of given number passed as string&amp;quot; do
      converted_slug = SlugConverter.new(&amp;quot;210&amp;quot;)
      expect(converted_slug.slug).to eq(&amp;quot;pb&amp;quot;)
    end

    it &amp;quot;sets number to integer value of argument that starts with a number but also contains letters&amp;quot; do
      converted_slug = SlugConverter.new(&amp;quot;210jj&amp;quot;)
      expect(converted_slug.number).to eq(210)
    end

    it &amp;quot;sets slug to encoded value of argument that starts with a number but also contains letters&amp;quot; do
      converted_slug = SlugConverter.new(&amp;quot;210jj&amp;quot;)
      expect(converted_slug.slug).to eq(&amp;quot;pb&amp;quot;)
    end

  end

  describe &amp;quot;.slug&amp;quot; do

     it &amp;quot;returns slug when slug is set&amp;quot; do
        converted_slug = SlugConverter.new(&amp;quot;hy&amp;quot;)
        expect(converted_slug.slug).to eq(&amp;quot;hy&amp;quot;)
     end

     it &amp;quot;returns encoded slug when link id is set&amp;quot; do
        converted_id = SlugConverter.new(113)
        expect(converted_id.slug).to eq(&amp;quot;hy&amp;quot;)
     end

  end

  describe &amp;quot;.slug&amp;quot; do

    it &amp;quot;sets slug to given value&amp;quot; do
      converted_slug = SlugConverter.new(&amp;quot;ezk&amp;quot;)
      expect(converted_slug.slug=(&amp;quot;ebk&amp;quot;)).to eq(&amp;quot;ebk&amp;quot;)
    end

    it &amp;quot;sets number to decoded value of slug&amp;quot; do
      converted_slug = SlugConverter.new(&amp;quot;pb&amp;quot;)
      converted_slug.slug=(&amp;quot;ezk&amp;quot;)
      expect(converted_slug.number).to eq(1483)
    end

    it &amp;quot;raises Arrgument Error exception if given value is an empty string&amp;quot; do
      expect { SlugConverter.new(&amp;quot;&amp;quot;) }.to raise_error(ArgumentError)
    end

    it &amp;quot;raises Arrgument Error exception if given value is nil&amp;quot; do
      expect { SlugConverter.new(nil) }.to raise_error(ArgumentError)
    end

    it &amp;quot;raises Arrgument Error exception if given value contains unpermitted letters&amp;quot; do
      expect { SlugConverter.new(&amp;quot;iiii&amp;quot;) }.to raise_error(ArgumentError)
    end

    it &amp;quot;raises Arrgument Error exception if given value starts with letter but contains numbers&amp;quot; do
      expect { SlugConverter.new(&amp;quot;bb12&amp;quot;) }.to raise_error(ArgumentError)
    end

  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make rspec rake task available we will setup tasks folder where we&amp;rsquo;ll place our &lt;code&gt;rspec.rake&lt;/code&gt; file containing only 2 lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rspec/core/rake_task&#39;
RSpec::Core::RakeTask.new(:spec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then we will import this file in our Rakefile that bundler provided automatically:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Dir.glob(&#39;tasks/**/*.rake&#39;).each(&amp;amp;method(:import))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle exec rake spec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And watch your tests fail. :)&lt;/p&gt;

&lt;h3 id=&#34;add-gem-functionality:26b86b95592661b7092ab782e8d51bcd&#34;&gt;Add gem functionality&lt;/h3&gt;

&lt;p&gt;Now we need to make those test go green. To do that we will again copy the existing code from our application in the main gem file &lt;code&gt;lib/slug_converter.rb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &amp;quot;slug_converter/version&amp;quot;
require &#39;set&#39;
require &#39;gem_config&#39;

class SlugConverter
  include GemConfig::Base
  with_configuration do
    has :alphabet, default: &amp;quot;qjeghxtrpnfmdzwvsybkuoca&amp;quot;
  end

  def initialize(number_or_slug)
     @alphabet = SlugConverter.configuration.alphabet.split(//)
    if number_or_slug.to_i != 0
      @number = number_or_slug.to_i
    elsif validate_string(number_or_slug)
      @slug = number_or_slug.downcase
    else
      raise ArgumentError, &#39;Argument must be integer value or non-empty string consisting of predefined letters&#39;
    end
  end

  def number
    if @number.nil?
      @number = bijective_decode
    else
      @number
    end
  end

  def number=(new_number)
    @number = new_number
    @slug = bijective_encode
    @number
  end

  def slug
    if @slug.nil?
      @slug = bijective_encode
    else
      @slug
    end
  end

  def slug=(new_slug)
    @slug = new_slug
    @number = bijective_decode
    @slug
  end

  private

    def bijective_encode
      id = @number
      return @alphabet[0] if id == 0
      s = &#39;&#39;
      base = @alphabet.length
      while id &amp;gt; 0
        s &amp;lt;&amp;lt; @alphabet[id.modulo(base)]
        id /= base
      end
      s.reverse
    end

    def bijective_decode
      i = 0
      base = @alphabet.length
      @slug.each_char { |c| i = i * base + @alphabet.index(c) }
      i
    end

    def validate_string(slug)
      unless slug.nil?
        alphabet = Set.new @alphabet
        slug_letters = Set.new slug.downcase().split(//)
        slug != &amp;quot;&amp;quot; &amp;amp;&amp;amp; (slug_letters.subset? alphabet)
      end
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we run the tests again, they should all pass.&lt;/p&gt;

&lt;h3 id=&#34;making-your-gem-configurabile:26b86b95592661b7092ab782e8d51bcd&#34;&gt;Making your gem configurabile&lt;/h3&gt;

&lt;p&gt;In order to allow users to set their own alphabet that will be used by the SlugConverter, we needed to make our gem configurabile. To do this we used &lt;a href=&#34;https://github.com/krautcomputing/gem_config&#34;&gt;https://github.com/krautcomputing/gem_config&lt;/a&gt; gem.&lt;/p&gt;

&lt;p&gt;You will notice this code at the begining of the SlugConverter class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class SlugConverter
  include GemConfig::Base

  with_configuration do
    has :alphabet, default: &amp;quot;qjeghxtrpnfmdzwvsybkuoca&amp;quot;
  end

  def initialize(number_or_slug)
     @alphabet = SlugConverter.configuration.alphabet.split(//)
     # ...
  end

  # rest of the code omitted
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this code along with &lt;code&gt;spec.add_runtime_dependency &#39;gem_config&#39;&lt;/code&gt; added as a dependency in &lt;code&gt;slug_converter.gemspec&lt;/code&gt; file, alows us to make the gem configureabile.&lt;/p&gt;

&lt;p&gt;Custom aphabet can than be defined by adding &lt;code&gt;config/initializers/slug_converter.rb&lt;/code&gt; to your application, and defining the alphabet like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SlugConverter.configuration.alphabet = &amp;quot;your_custom_alphabet_here&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;releasing-your-gem:26b86b95592661b7092ab782e8d51bcd&#34;&gt;Releasing your gem&lt;/h3&gt;

&lt;p&gt;Now that we have the test passing and all the code in place it&amp;rsquo;s time to make the gem available for everyone to use by releasing it on RubyGems, to do that you will need to have a RubyGems account. If this is the first time you release a gem you will be prompted to enter your RubyGems username and password. You will also need to have your repository setup on Github.&lt;/p&gt;

&lt;p&gt;Then with just one comand:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bundle exec rake release
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;your code will be pushed to your Github repository,&lt;/li&gt;
&lt;li&gt;your git repository will be tagged with the version number using a name like &amp;ldquo;v1.0.0&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;your gem released on RubyGems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The ruby gem described in this blog post can be found here &lt;a href=&#34;https://rubygems.org/gems/slug_converter&#34;&gt;https://rubygems.org/gems/slug_converter&lt;/a&gt;, and all the code is in this GitHub repository &lt;a href=&#34;https://github.com/orangeiceberg/slug_converter&#34;&gt;https://github.com/orangeiceberg/slug_converter&lt;/a&gt; .&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Changing database starting id</title>
      <link>http://blog.orangeiceberg.com/posts/changing-database-starting-id</link>
      <pubDate>Mon, 01 Jun 2015 11:03:47 +0200</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/changing-database-starting-id</guid>
      <description>

&lt;p&gt;For our new project it was necessary to modify the starting id of our database. This can be handled through migration for creating table but we decided to create a rake task that handled this for us.&lt;/p&gt;

&lt;p&gt;The rake task that we created detects what database is being used and executes appropriate changes according to that.&lt;/p&gt;

&lt;p&gt;You can create a rake task using rails generate command for rake task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rails g task namespace task_name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create your task in lib/tasks with chosen namespace and task name.&lt;/p&gt;

&lt;p&gt;Here is our task and an explanation that follows.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;namespace :database do
  desc &amp;quot;Detect database that&#39;s being used and then increment its id&amp;quot;
  task autoincrement: :environment do

    db_name_downcase = ActiveRecord::Base.connection.adapter_name.downcase

    if Link.maximum(:id).to_i &amp;lt; 1000
      if db_name_downcase.start_with? &amp;quot;mysql&amp;quot;
        ActiveRecord::Base.connection.execute(&amp;quot;ALTER TABLE links AUTO_INCREMENT = 1000&amp;quot;)
      end
      if db_name_downcase.start_with? &amp;quot;postgres&amp;quot;
        ActiveRecord::Base.connection.execute(&amp;quot;ALTER SEQUENCE links_id_seq START with 1000 RESTART;&amp;quot;)
      end
      if db_name_downcase.start_with? &amp;quot;sqlite&amp;quot;
        ActiveRecord::Base.connection.execute(&amp;quot;insert into sqlite_sequence(name,seq) values(&#39;links&#39;, 1000)&amp;quot;)
      end
    else
      puts &amp;quot;To perform this task your database shouldn&#39;t have records with id number higher than 1000&amp;quot;
    end

  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to change the starting id of our database to 1000 so we check that we don&amp;rsquo;t have a record with id higher than 1000. Link is our Active Record model and links is the name of our table.&lt;/p&gt;

&lt;p&gt;ActiveRecord::Base.connection returns the connection currently associated with the class. We use it to detect the name of database and execute appropriate changes.&lt;/p&gt;

&lt;h3 id=&#34;mysql:d15bb8f4407f58e2ce472d247df169d1&#34;&gt;MySQL&lt;/h3&gt;

&lt;p&gt;For MySQL we need to set AUTO_INCREMENT value to 1000, Auto-increment allows a unique number to be generated when a new record is inserted into a table. When first record is created it sets its primary key to 1 by default  and it will auto increment by 1 for each new record.&lt;/p&gt;

&lt;h3 id=&#34;postgresql:d15bb8f4407f58e2ce472d247df169d1&#34;&gt;PostgreSQL&lt;/h3&gt;

&lt;p&gt;For Postgres we have to explain what a sequence is. A sequence is a special kind of a database object designed for generating unique numeric identifiers. It is typically used to generate artificial primary keys. Sequences are similar to the Auto-increment concept in MySQL.&lt;/p&gt;

&lt;h3 id=&#34;sqlite:d15bb8f4407f58e2ce472d247df169d1&#34;&gt;SQLite&lt;/h3&gt;

&lt;p&gt;For SQlite we altered sqlite_sequence table, which is an internal table used to implement AUTOINCREMENT. It is created automatically whenever any ordinary table with an AUTOINCREMENT integer primary key is created.&lt;/p&gt;

&lt;p&gt;You can check &lt;a href=&#34;http://stackoverflow.com/questions/2075331/change-starting-id-number&#34;&gt;this Stack Overflow discussion&lt;/a&gt; that was very helpful to me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Customize Devise permitted parameters</title>
      <link>http://blog.orangeiceberg.com/posts/customize-devise-permitted-parameters</link>
      <pubDate>Mon, 04 May 2015 16:07:22 +0200</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/customize-devise-permitted-parameters</guid>
      <description>&lt;p&gt;If you are using Devise gem for authentication and you have been adding custom fields to your model you’ll get in trouble when you try to create a new instance or update an existing one. All your added fields will be treated as unpermitted. The solution for this problem is to customise Devise’s configure_permited_parameters action. All you need to do is to add this action to your Application controller and push parameters that need to be permitted to devise_paremeter_sanitizer array. So let’s say you have a User Model and you have added company_name and website fields to your user’s table, to permit this parameters on sign_up you need to add this to your Application controller:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def configure_permitted_parameters
  devise_parameter_sanitizer.for(:sign_up).push(:company_name, :website)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is the same principle for the :sign_in and :edit_account. You can see what are &lt;a href=&#34;https://github.com/plataformatec/devise/blob/master/lib/devise/parameter_sanitizer.rb#L83&#34;&gt;default permitted parameters here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to skip Devise trackable updates</title>
      <link>http://blog.orangeiceberg.com/posts/how-to-skip-devise-trackable-updates</link>
      <pubDate>Mon, 12 May 2014 19:10:06 +0200</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/how-to-skip-devise-trackable-updates</guid>
      <description>&lt;p&gt;Devise has a very useful Trackable module used to track user&amp;rsquo;s sign in count, timestamps and IP address. There are some occasions when you need to disable tracking. For example for API requests where user signs in on every request; for instances where admin might sign in as an user; and similar.&lt;/p&gt;

&lt;p&gt;To disable Devise Trackable module you need to set &lt;code&gt;request.env[&amp;quot;devise.skip_trackable&amp;quot;] = true&lt;/code&gt;. You have to do that before trying to authenticate user, so you&amp;rsquo;ll want to put it in a before_filter, or even better prepend_before_filter to make sure it&amp;rsquo;s before authentication.&lt;/p&gt;

&lt;p&gt;Add this to your controller in which you want to disable tracking:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;prepend_before_filter :disable_devise_trackable

protected
  def disable_devise_trackable
    request.env[&amp;quot;devise.skip_trackable&amp;quot;] = true
  end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade Ubuntu 8.04 LTS server</title>
      <link>http://blog.orangeiceberg.com/posts/upgrade-ubuntu-8-dot-04-lts-server</link>
      <pubDate>Mon, 06 Jan 2014 11:36:43 +0100</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/upgrade-ubuntu-8-dot-04-lts-server</guid>
      <description>&lt;p&gt;Note to self: here is how to upgrade Ubuntu 8.04 LTS (or any other release that is no longer supported) to newer Ubuntu release.&lt;/p&gt;

&lt;p&gt;When you are upgrading unsupported release of Ubuntu if you try to do the usual &lt;code&gt;sudo apt-get update&lt;/code&gt; it will most likely fail because&amp;hellip; well, it&amp;rsquo;s unsupported. The simple fix for this is to change your &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; and replace repository URLs from something like &lt;code&gt;us.archive.ubuntu.com&lt;/code&gt; to &lt;code&gt;old-releases.ubuntu.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After that you should be able follow normal upgrade procedure (use sudo if you are not root):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apt-get update
apt-get install update-manager-core
do-release-upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rimuhosting.com/knowledgebase/linux/distros/ubuntu&#34; title=&#34;Rimuhosting&#39;s page on upgrading Ubuntu&#34;&gt;Rimuhosting&amp;rsquo;s page on upgrading Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://askubuntu.com/questions/91815/how-to-install-software-or-upgrade-from-old-unsupported-release&#34; title=&#34;Discussion on upgrading unsupported Ubuntu release&#34;&gt;Discussion on upgrading unsupported Ubuntu release&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>