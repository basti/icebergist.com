<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Resources on Icebergist</title>
    <link>http://blog.orangeiceberg.com/tags/resources/</link>
    <description>Recent content in Resources on Icebergist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Mar 2010 09:00:00 +0100</lastBuildDate>
    <atom:link href="http://blog.orangeiceberg.com/tags/resources/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Rails 3 reading list</title>
      <link>http://blog.orangeiceberg.com/posts/rails-3-reading-list</link>
      <pubDate>Mon, 29 Mar 2010 09:00:00 +0100</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/rails-3-reading-list</guid>
      <description>&lt;p&gt;I&amp;#8217;ve been planning to catchup with all the new Rails 3 stuff. To get me started I&amp;#8217;ve compiled a small Rails 3 related reading list.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://guides.rails.info/3_0_release_notes.html&#34;&gt;Ruby on Rails 3.0 Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://m.onkey.org/2010/1/22/active-record-query-interface&#34;&gt;Active Record Query Interface 3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://edgerails.info/articles/what-s-new-in-edge-rails/2010/02/23/the-skinny-on-scopes-formerly-named-scope/&#34;&gt;The Skinny on Scopes (Formerly named_scope)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.envylabs.com/2010/02/rails-3-beautiful-code/&#34;&gt;Rails 3 Beautiful Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://railscasts.com/tags/27&#34;&gt;Railscasts &amp;#8211; rails-3.0 episodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://joshhuckabee.com/jquery-rails-3&#34;&gt;jQuery with Rails 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://litanyagainstfear.com/blog/2010/02/03/the-rails-module/&#34;&gt;The Rails Module (in Rails 3)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once I&amp;#8217;m done with it I plan to get even more from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://edgerails.info/articles/what-s-new-in-edge-rails/2010/02/10/rails-3-resources/&#34;&gt;Rails 3 Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rubyinside.com/rails-3-0-beta-links-2966.html&#34;&gt;Rails 3.0 Beta: 36 Links and Resources To Get You Going&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>RESTful admin namespaced controller using scaffolding</title>
      <link>http://blog.orangeiceberg.com/posts/restful-admin-namespaced-controller-using-scaffolding</link>
      <pubDate>Wed, 17 Sep 2008 09:00:00 +0100</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/restful-admin-namespaced-controller-using-scaffolding</guid>
      <description>&lt;p&gt;Most of my clients prefer to have a separate admin section. In turn, I like to have separate controllers for admin section and front-end in my Rails app. This is not as straightforward as it might seem, especially if you like to use scaffolding for admin controller.&lt;/p&gt;

&lt;p&gt;The goal is to get 2 separate RESTful controllers, admin &amp;amp; front-end controller, one model and for admin pages to have scaffolding.&lt;/p&gt;

&lt;p&gt;Here is the easiest way I found so far to accomplish this. This example generates categories model and controllers for it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./script/generate controller admin/categories&amp;lt;br /&amp;gt;
./script/generate scaffold category name:string&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will generate an empty controller in admin namespace and a scaffolded resource for front-end controller.&lt;/p&gt;

&lt;p&gt;Now we have everything generated we just need to make it work with admin controller and not with front-end.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;move all templates from app/views/categories to app/views/&lt;strong&gt;admin&lt;/strong&gt;/categories&lt;/li&gt;
&lt;li&gt;copy all functions from categories_controller.rb to admin/categories_controller.rb&lt;/li&gt;
&lt;li&gt;add namespace for admin controller in routes.rb:&lt;code&gt;map.namespace :admin do |admin|&amp;lt;br /&amp;gt;
admin.resources :categories&amp;lt;br /&amp;gt;
end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;in admin/categories_controller.rb replace in 3 places redirect_to calls to work with admin namespace. It will have something like redirect_to(@category), but to work with namespace it needs to have redirect_to([:admin, @category])&lt;/li&gt;
&lt;li&gt;make similar changes in all templates, i.e. make it work within an admin namespace. You need to make following changes:

&lt;ul&gt;
&lt;li&gt;form_for(@category) =&amp;gt; &lt;strong&gt;form_for([:admin, @category])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;%= link_to &amp;#8216;Show&amp;#8217;, @category %&amp;gt; =&amp;gt; &lt;strong&gt;&amp;lt;%= link_to &amp;#8216;Show&amp;#8217;, [:admin, @category] %&amp;gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;categories_path =&amp;gt; &lt;strong&gt;admin_categories_path&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;edit_category_path(@category) =&amp;gt; &lt;strong&gt;edit_admin_category_path(@category)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;new_category_path =&amp;gt; &lt;strong&gt;new_admin_category_path&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;#8217;s it. Now you&amp;#8217;ll have /admin/categories for all administrative tasks and you have a free controller for front-end actions.&lt;/p&gt;

&lt;p&gt;You might wonder why not just generate scaffold for admin/categories&amp;#8230; The reason is that you&amp;#8217;ll also get a model that is namespaced in admin (i.e. model would be Admin::Category). Scaffolded views also wouldn&amp;#8217;t work as it seems that generator doesn&amp;#8217;t take into account the fact that you are using a namespace.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>