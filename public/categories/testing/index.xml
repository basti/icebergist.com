<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Icebergist</title>
    <link>http://blog.orangeiceberg.com/categories/testing/</link>
    <description>Recent content in Testing on Icebergist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Dec 2015 11:12:56 +0200</lastBuildDate>
    <atom:link href="http://blog.orangeiceberg.com/categories/testing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Headless Firefox in Ubuntu on VirtualBox for Cucumber testing</title>
      <link>http://blog.orangeiceberg.com/posts/headless-firefox-in-ubuntu-on-virtualbox-for-cucumber-testing</link>
      <pubDate>Thu, 03 Dec 2015 11:12:56 +0200</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/headless-firefox-in-ubuntu-on-virtualbox-for-cucumber-testing</guid>
      <description>

&lt;p&gt;If you use &lt;a href=&#34;http://www.vagrantup.com/downloads.html&#34;&gt;Vagrant&lt;/a&gt;, &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt; and Ubuntu to build your Rails apps and you want to test it with Cucumber scenarios, this is the right post for you. By default Vagrant and VirtualBox use Ubuntu without an X server and GUI.&lt;/p&gt;

&lt;p&gt;Everything goes well until you need &lt;code&gt;@javascript&lt;/code&gt; flag for your cucumber scenario. &lt;code&gt;@javascript&lt;/code&gt; uses a javascript-aware system to process web requests (e.g. Selenium) instead of the default (non-javascript-aware) webrat browser.&lt;/p&gt;

&lt;h3 id=&#34;install-mozilla-firefox:e440c2a4f60085f5f973ab25c52a888b&#34;&gt;Install Mozilla Firefox&lt;/h3&gt;

&lt;p&gt;Selenium WebDriver is flexible and lets you run selenium headless in servers with no display. But in order to run, Selenium needs to launch a browser. If there is no display to the machine, the browsers are not launched. So in order to use selenium, you need to fake a display and let selenium and the browser think they are running in a machine with a display.&lt;/p&gt;

&lt;p&gt;Install latest version of Mozilla Firefox:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt-get install firefox&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since Ubuntu is running without a X server Selenium cannot start Firefox because it requires an X server.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-virtual-x-server:e440c2a4f60085f5f973ab25c52a888b&#34;&gt;Setting up virtual X server&lt;/h3&gt;

&lt;p&gt;Virtual X server is required to make browsers run normally by making them believe there is a display available, although it doesn&amp;rsquo;t create any visible windows.&lt;/p&gt;

&lt;p&gt;Xvfb (X Virtual FrameBuffer) works fine for this. Xvfb lets you run X-Server in machines with no display devices.&lt;/p&gt;

&lt;p&gt;Install xvfb on ubuntu:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt-get install xvfb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lets run the Xvfb service in a display number which is less likely to clash even if you add a display at a later stage. Display 10 will do fine.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo Xvfb :10 -ac&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The parameter -ac makes xvfb run with access control off. The server should be running now.&lt;/p&gt;

&lt;h3 id=&#34;headless-firefox:e440c2a4f60085f5f973ab25c52a888b&#34;&gt;Headless Firefox&lt;/h3&gt;

&lt;p&gt;Before you can run a browser, you need to set the environment variable DISPLAY with the display number at which xvfb is running.&lt;/p&gt;

&lt;p&gt;Open new tab in terminal and set the DISPLAY variable:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export DISPLAY=:10&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and start mozilla firefox:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;firefox&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you run firefox headlessly in Ubuntu, and you can run your cucumber scenarios with &lt;code&gt;@javascript&lt;/code&gt; flag.&lt;/p&gt;

&lt;h3 id=&#34;start-virtual-x-server-automatically:e440c2a4f60085f5f973ab25c52a888b&#34;&gt;Start virtual X server automatically&lt;/h3&gt;

&lt;p&gt;To run your X server automatically, after installing Xvfb, you will need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;put content of &lt;a href=&#34;https://gist.github.com/basti/2db0b71e893ee4d6d015&#34;&gt;this gist&lt;/a&gt; in &lt;code&gt;/etc/init.d/xvfb&lt;/code&gt; (hint use &lt;code&gt;sudo wget&lt;/code&gt; command to do that)&lt;/li&gt;
&lt;li&gt;make it executable &lt;code&gt;sudo chmod a+x /etc/init.d/xvfb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;start xvfb on display number 10 &lt;code&gt;export DISPLAY=:10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;run X server &lt;code&gt;sudo /etc/init.d/xvfb start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;when you want to stop X server &lt;code&gt;sudo /etc/init.d/xvfb stop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is my way to run firefox headlessly in Virtual box Ubuntu, and to run cucumber scenarios with &lt;code&gt;@javascript&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.installationpage.com/selenium/how-to-run-selenium-headless-firefox-in-ubuntu/&#34;&gt;Selenium Headless Automated Testing in Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/jterrace/2911875&#34;&gt;Xvfb init script for Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>RSpec and FactoryGirl setup for testing Carrierwave uploaders</title>
      <link>http://blog.orangeiceberg.com/posts/rspec-and-factorygirl-setup-for-testing-carrierwave-uploaders</link>
      <pubDate>Sat, 07 Sep 2013 09:00:00 +0100</pubDate>
      
      <guid>http://blog.orangeiceberg.com/posts/rspec-and-factorygirl-setup-for-testing-carrierwave-uploaders</guid>
      <description>

&lt;p&gt;Assume that you have the usual setup with model (MyFile) using simple Carrierwave uploader (MyFileUploader):&lt;/p&gt;

&lt;pre&gt;# app/models/my_file.rb
class MyFile &amp;lt; ActiveRecord::Base
  mount_uploader :file, MyFileUploader
end&lt;/pre&gt;

&lt;p&gt;To be able to test Carrierwave uploaders with RSpec using FactoryGirl factories you need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;line-height: 13px;&#34;&gt;define factory with uploaded file&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;modify test environment storage so test file uploads are separated from other uploads&lt;/li&gt;
&lt;li&gt;turn off image processing to speed up tests&lt;/li&gt;
&lt;li&gt;perform cleanup after each test&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;define-factory:f55ec0979c7942ed3400c6817da421f3&#34;&gt;Define factory&lt;/h2&gt;

&lt;pre&gt;# spec/factories/my_files.rb
FactoryGirl.define do
 factory :my_file do
   photo Rack::Test::UploadedFile.new(File.open(File.join(Rails.root, &#39;/spec/fixtures/myfiles/myfile.jpg&#39;)))
 end
end&lt;/pre&gt;

&lt;h2 id=&#34;setup-carrierwave:f55ec0979c7942ed3400c6817da421f3&#34;&gt;Setup Carrierwave&lt;/h2&gt;

&lt;p&gt;First we need to make sure Carrierwave is using local file system for storage and to disable file processing for testing environments. Disabling file processing will speed up tests considerably. We can do that by adding following to Carrierwave initializer:&lt;/p&gt;

&lt;pre&gt;if Rails.env.test? || Rails.env.cucumber?
  CarrierWave.configure do |config|
    config.storage = :file
    config.enable_processing = false
  end
end&lt;/pre&gt;

&lt;p&gt;Next we should separate test uploads from any other uploads. We can do that by modifying cache_dir and store_dir methods for all Carrierwave models (i.e. all models that are descendants ofÂ CarrierWave::Uploader::Base). So the whole Carrierwave initializer looks something like:&lt;/p&gt;

&lt;pre&gt;# config/initializers/carrierwave.rb
if Rails.env.test? || Rails.env.cucumber?
  CarrierWave.configure do |config|
    config.storage = :file
    config.enable_processing = false
  end

  # make sure our uploader is auto-loaded
  MyFileUploader

  # use different dirs when testing
  CarrierWave::Uploader::Base.descendants.each do |klass|
    next if klass.anonymous?
    klass.class_eval do
      def cache_dir
        &#34;#{Rails.root}/spec/support/uploads/tmp&#34;
      end

      def store_dir
        &#34;#{Rails.root}/spec/support/uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}&#34;
      end
    end
  end
end&lt;/pre&gt;

&lt;h2 id=&#34;clean-up-uploaded-files:f55ec0979c7942ed3400c6817da421f3&#34;&gt;Clean up uploaded files&lt;/h2&gt;

&lt;p&gt;Using factory defined above will create uploaded files in cache_dir and store_dir. These are just temporary files and should be removed after each test, so each of them has a clean slate. By adding after :each hook in RSpec configuration block we can remove these files simply by deleting spec/support/uploads dir.&lt;/p&gt;

&lt;pre&gt;# spec_helper.rb
RSpec.configure do |config|
  config.after(:each) do
    if Rails.env.test? || Rails.env.cucumber?
      FileUtils.rm_rf(Dir[&#34;#{Rails.root}/spec/support/uploads&#34;])
    end 
  end
end&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>