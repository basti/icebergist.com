<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Misc | Icebergist]]></title>
  <link href="http://icebergist.com/category/misc/atom.xml" rel="self"/>
  <link href="http://icebergist.com/"/>
  <updated>2014-03-26T16:17:26+01:00</updated>
  <id>http://icebergist.com/</id>
  <author>
    <name><![CDATA[Slobodan Kovačević]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Upgrade Ubuntu 8.04 LTS server]]></title>
    <link href="http://icebergist.com/posts/upgrade-ubuntu-8-dot-04-lts-server/"/>
    <updated>2014-01-06T11:36:43+01:00</updated>
    <id>http://icebergist.com/posts/upgrade-ubuntu-8-dot-04-lts-server</id>
    <content type="html"><![CDATA[<p>Note to self: here is how to upgrade Ubuntu 8.04 LTS (or any other release that is no longer supported) to newer Ubuntu release.</p>

<p>When you are upgrading unsupported release of Ubuntu if you try to do the usual <code>sudo apt-get update</code> it will most likely fail because&hellip; well, it&rsquo;s unsupported. The simple fix for this is to change your <code>/etc/apt/sources.list</code> and replace repository URLs from something like <code>us.archive.ubuntu.com</code> to <code>old-releases.ubuntu.com</code>.</p>

<p>After that you should be able follow normal upgrade procedure (use sudo if you are not root):</p>

<p><code>sh
apt-get update
apt-get install update-manager-core
do-release-upgrade
</code></p>

<p>References:</p>

<ul>
<li><a href="http://rimuhosting.com/knowledgebase/linux/distros/ubuntu" title="Rimuhosting's page on upgrading Ubuntu">Rimuhosting&rsquo;s page on upgrading Ubuntu</a></li>
<li><a href="http://askubuntu.com/questions/91815/how-to-install-software-or-upgrade-from-old-unsupported-release" title="Discussion on upgrading unsupported Ubuntu release">Discussion on upgrading unsupported Ubuntu release</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick VirtualBox/Vagrant setup with Heroku-like box]]></title>
    <link href="http://icebergist.com/posts/quick-virtualboxvagrant-setup-with-heroku-like-box"/>
    <updated>2013-09-16T10:00:00+02:00</updated>
    <id>http://icebergist.com/posts/quick-virtualboxvagrant-setup-with-heroku-like-box</id>
    <content type="html"><![CDATA[<p>Here is a quick way to setup VirtualBox using Vagrant with Heroku-like box on Mac.</p>

<ol>
<li><p>Install VirtualBox from <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank"><a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></a></p></li>
<li><p>Install Vagrant from <a href="http://downloads.vagrantup.com/" target="_blank"><a href="http://downloads.vagrantup.com/">http://downloads.vagrantup.com/</a></a></p></li>
<li><p>Create Vagrantfile for Heroku-like box (based on <a href="https://github.com/ejholmes/vagrant-heroku" target="_blank"><a href="https://github.com/ejholmes/vagrant-heroku">https://github.com/ejholmes/vagrant-heroku</a></a>) that looks something like:</p></li>
</ol>


<p>``` ruby</p>

<pre><code>    Vagrant.configure("2") do |config|        
        config.vm.box = "heroku"
        config.vm.box_url = "https://dl.dropboxusercontent.com/s/rnc0p8zl91borei/heroku.box"
        config.vm.synced_folder ".", "/vagrant", :nfs =&amp;gt; true
        config.vm.network :private_network, ip: "192.168.1.42"  # required for NFS
    end
</code></pre>

<p>```</p>

<p>Beside telling Vagrant to use Heroku-like box from <a href="https://github.com/ejholmes/vagrant-heroku" target="_blank"><a href="https://github.com/ejholmes/vagrant-heroku">https://github.com/ejholmes/vagrant-heroku</a></a> it also sets up shared dir between host and VM machine. It will mount Vagrantfile dir (.) to /vagrant in VM.</p>

<p><code>vagrant up</code> will setup the VM and start it up.</p>

<p>Now you can use <code>vagrant ssh</code> to login to VM.</p>

<p>Vagrant Heroku-like box comes with Postgresql, but if you want you can easily setup sqlite:</p>

<p><code>sh
sudo apt-get install libsqlite3-dev
</code></p>

<p><strong>Bonus tip</strong>: when you are working on multiple projects sometimes you can forget which VMs are running. You can list all running VMs using:</p>

<p><code>sh
VBoxManage list runningvms
</code></p>

<p>Further reading:</p>

<ul>
<li><a href="http://docs.vagrantup.com/v2/" target="_blank">Vagrant docs</a></li>
<li><a href="https://github.com/ejholmes/vagrant-heroku" target="_blank">Vagrant Heroku-like box</a> which can be easily customized.</li>
<li><a href="http://loudcoding.com/posts/how-to-use-vagrant-to-run-celadon-cedar-stack-on-heroku/" target="_blank">Another Vagrant setup tutorial</a></li>
<li><a href="https://www.stackmachine.com/blog/web-development-on-a-vm-is-it-slower" target="_blank">VM speed benchmarks</a> in case you doubt in VM speed.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Restoring superblock on Ubutnu]]></title>
    <link href="http://icebergist.com/posts/restoring-superblock-on-ubutnu"/>
    <updated>2008-11-09T09:00:00+01:00</updated>
    <id>http://icebergist.com/posts/restoring-superblock-on-ubutnu</id>
    <content type="html"><![CDATA[<p>Recently I had a problem on my Torrent box (an old PC that I use as dedicated torrent client) that runs Ubuntu. For some reason my root partition was being mounted as read-only. Everything else seemed to work (all other partitions were mounted properly), but I couldn&#8217;t change any of my config or do anything on root partition.</p>

<p>I did the usual stuff:</p>

<ul>
<li>Run fsck checks and it said that everything is fine</li>
<li>Used Ubuntu&#8217;s live CD to boot, which got me read-write access to root partition. I changed some things in fstab, tried to get it to be rw permanently. No matter what I did as soon as I rebooted the root partition was once again read-only.</li>
<li>I tried booting from some repair disks I have, but all checks passed and no problem was detected. <img src='http://icebergist.com/wp-includes/images/smilies/icon_sad.gif' alt=':(' class='wp-smiley' /></li>
</ul>


<p>Finally, I read somewhere that a similar problem was caused by faulty superblock on hard drive. Fortunately Ubuntu stores superblock backups in different places around disk, so I decided to try to restore it from one of those backups.</p>

<p>It turned out that all I needed was a single command (this <a href="http://ubuntuforums.org/showpost.php?s=72da065bbe1506b27f41a8cfc252c732&amp;p=1424786&amp;postcount=5" title="Bad superblock">Ubuntu forum post helped</a>) to restore superblock:</p>

<p><code>e2fsck -b 32768 /dev/hdc1</code></p>

<p>After that my root partition was back to read-write mode. <img src='http://icebergist.com/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /></p>

<p>Before you do stuff like that to your computer I suggest that you read man pages for <a href="http://linux.die.net/man/8/mke2fs" title="mke2fs">mke2fs</a> and <a href="http://linux.die.net/man/8/e2fsck" title="e2fsck">e2fsck</a>. It will prevent you from doing something foolish like deleting your whole hard drive. <img src='http://icebergist.com/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mosso hosting cloud]]></title>
    <link href="http://icebergist.com/posts/mosso-hosting-cloud"/>
    <updated>2008-09-17T10:00:00+02:00</updated>
    <id>http://icebergist.com/posts/mosso-hosting-cloud</id>
    <content type="html"><![CDATA[<p><a class="external" href="http://www.mosso.com/">Mosso&#8217;s hosting cloud</a>
at $100 / month seems like a good solution to get a scalable server. However one thing bugs me, actually two things&#8230;</p>

<p>First one: they offer <strong>FTP only access</strong>. Meaning you cannot deploy sites directly from code repositories (i.e. git or svn). That sucks.</p>

<p>Second thing that bugs me: for $100 you get quite a lot of computing power which can be used to run multiple sites &#8211; but <strong>you are only allowed to have one Rails app running</strong>. Only one. If you want additional Rails apps (for example to have a test server) you need to pay an extra fee.</p>

<p>I know it&#8217;s cloud computing and that you have to be able to run it with any additional configuration (that&#8217;s why I think it&#8217;s ok that you have to freeze your gems in Rails apps, because you cannot install any gems yourself)&#8230; but not being able to checkout my code from repository and having to upload the whole app each time you make changes <strong>is really annoying</strong>.</p>

<p>In their defense, the support guy said that they are working on it, but he could give me an ETA when they&#8217;ll allow something like that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[InnoDB per-table tablespaces &#8211; split ibdata1 to smaller chunks]]></title>
    <link href="http://icebergist.com/posts/innodb-per-table-tablespaces-split-ibdata1-to-smaller-chunks"/>
    <updated>2008-07-24T10:00:00+02:00</updated>
    <id>http://icebergist.com/posts/innodb-per-table-tablespaces-split-ibdata1-to-smaller-chunks</id>
    <content type="html"><![CDATA[<p>Today I had to import 3GB of InnoDB tables in MySQL. Unfortunately, while importing the server run out of disk space &#8211; which caused whole server to grind to a halt. Naively I tried to delete imported data to free up space&#8230; I was in for an unpleasant surprise.</p>

<p>By default when MySQL uses InnoDB engine it stores most of the information in single file called ibdata1. One downside is that once ibdata1 file grows it cannot shrink &#8211; even if you delete all InnoDB tables. For some reason MySQL is set to use single file instead of per-table tablespaces similar to MyISAM.</p>

<p>Enabling per-table tablespaces is easy just add <a href="http://dev.mysql.com/doc/refman/5.0/en/multiple-tablespaces.html" title="InnoDB Per-table tablespaces">innodb_file_per_table</a> to my.cnf file. Problem is that <strong>all newly created tables</strong>, only new tables, will be in separate files. It seems that there&#8217;s no easy way to convert old tables and reclaim the space taken by ibdata1.</p>

<p>There are 3 ways and two are basically export-drop-delete-import type of solutions:</p>

<ol>
<li>Convert all InnoDB tables to MyISAM</li>
<li>Export only InnoDB tables, drop them, delete ibdata1 and import InnoDB tables.</li>
<li>Export all databases, delete ibdata1 and import everything back.</li>
</ol>


<p>I choose option 2 because I luckily had only 40 InnoDB tables and much more using MyISAM. For details on how to apply each solution and down/up sides of each read <a href="http://vdachev.net/blog/2007/02/22/mysql-reducing-ibdata1/en/" title="MySQL Reducing ibdata1">MySQL: Reducing ibdata1</a>.</p>
]]></content>
  </entry>
  
</feed>
