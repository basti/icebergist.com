<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby and Rails | Icebergist]]></title>
  <link href="http://icebergist.com/category/ruby-and-rails/atom.xml" rel="self"/>
  <link href="http://icebergist.com/"/>
  <updated>2015-06-02T09:47:36+02:00</updated>
  <id>http://icebergist.com/</id>
  <author>
    <name><![CDATA[Orange Iceberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[changing database starting id]]></title>
    <link href="http://icebergist.com/posts/changing-database-starting-id/"/>
    <updated>2015-06-01T11:03:47+02:00</updated>
    <id>http://icebergist.com/posts/changing-database-starting-id</id>
    <content type="html"><![CDATA[<p>For our new project it was necessary to modify the starting id of our database. This can be handled through migration for creating table but we decided to create a rake task that handled this for us.</p>

<p>The rake task that we created detects what database is being used and executes appropriate changes according to that.</p>

<p>You can create a rake task using rails generate command for rake task:</p>

<p><code>
rails g task namespace task_name
</code>
This will create your task in lib/tasks with chosen namespace and task name.</p>

<p>Here is our task and an explanation that follows.</p>

<p>```ruby
namespace :database do
  desc &ldquo;Detect database that&rsquo;s being used and then increment its id&rdquo;
  task autoincrement: :environment do</p>

<pre><code>db_name_downcase = ActiveRecord::Base.connection.adapter_name.downcase

if Link.maximum(:id).to_i &lt; 1000
  if db_name_downcase.start_with? "mysql"
    ActiveRecord::Base.connection.execute("ALTER TABLE links AUTO_INCREMENT = 1000")
  end
  if db_name_downcase.start_with? "postgres"
    ActiveRecord::Base.connection.execute("ALTER SEQUENCE links_id_seq START with 1000 RESTART;")
  end
  if db_name_downcase.start_with? "sqlite"
    ActiveRecord::Base.connection.execute("insert into sqlite_sequence(name,seq) values('links', 1000)")
  end
else
  puts "To perform this task your database shouldn't have records with id number higher than 1000"
end
</code></pre>

<p>  end
end
```
We need to change the starting id of our database to 1000 so we check that we don&rsquo;t have a record with id higher than 1000. Link is our Active Record model and links is the name of our table.</p>

<p>ActiveRecord::Base.connection returns the connection currently associated with the class. We use it to detect the name of database and execute appropriate changes.</p>

<h3>MySQL</h3>

<p>For MySQL we need to set AUTO_INCREMENT value to 1000, Auto-increment allows a unique number to be generated when a new record is inserted into a table. When first record is created it sets its primary key to 1 by default  and it will auto increment by 1 for each new record.</p>

<h3>PostgreSQL</h3>

<p>For Postgres we have to explain what a sequence is. A sequence is a special kind of a database object designed for generating unique numeric identifiers. It is typically used to generate artificial primary keys. Sequences are similar to the Auto-increment concept in MySQL.</p>

<h3>SQLite</h3>

<p>For SQlite we altered sqlite_sequence table, which is an internal table used to implement AUTOINCREMENT. It is created automatically whenever any ordinary table with an AUTOINCREMENT integer primary key is created.</p>

<p>You can check <a href="http://stackoverflow.com/questions/2075331/change-starting-id-number">this Stack Overflow discussion</a> that was very helpful to me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize Devise permitted parameters]]></title>
    <link href="http://icebergist.com/posts/customize-devise-permitted-parameters/"/>
    <updated>2015-05-04T16:07:22+02:00</updated>
    <id>http://icebergist.com/posts/customize-devise-permitted-parameters</id>
    <content type="html"><![CDATA[<p>If you are using Devise gem for authentication and you have been adding custom fields to your model you’ll get in trouble when you try to create a new instance or update an existing one. All your added fields will be treated as unpermitted. The solution for this problem is to customise Devise’s configure_permited_parameters action. All you need to do is to add this action to your Application controller and push parameters that need to be permitted to devise_paremeter_sanitizer array. So let’s say you have a User Model and you have added company_name and website fields to your user’s table, to permit this parameters on sign_up you need to add this to your Application controller:</p>

<p><code>
def configure_permitted_parameters
  devise_parameter_sanitizer.for(:sign_up).push(:company_name, :website)
end
</code></p>

<p>It is the same principle for the :sign_in and :edit_account. You can see what are <a href="https://github.com/plataformatec/devise/blob/master/lib/devise/parameter_sanitizer.rb#L83">default permitted parameters here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to skip Devise trackable updates]]></title>
    <link href="http://icebergist.com/posts/how-to-skip-devise-trackable-updates/"/>
    <updated>2014-05-12T19:10:06+02:00</updated>
    <id>http://icebergist.com/posts/how-to-skip-devise-trackable-updates</id>
    <content type="html"><![CDATA[<p>Devise has a very useful Trackable module used to track user&rsquo;s sign in count, timestamps and IP address. There are some occasions when you need to disable tracking. For example for API requests where user signs in on every request; for instances where admin might sign in as an user; and similar.</p>

<p>To disable Devise Trackable module you need to set <code>request.env["devise.skip_trackable"] = true</code>. You have to do that before trying to authenticate user, so you&rsquo;ll want to put it in a before_filter, or even better prepend_before_filter to make sure it&rsquo;s before authentication.</p>

<p>Add this to your controller in which you want to disable tracking:</p>

<p>```
prepend_before_filter :disable_devise_trackable</p>

<p>protected
  def disable_devise_trackable</p>

<pre><code>request.env["devise.skip_trackable"] = true
</code></pre>

<p>  end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick VirtualBox/Vagrant setup with Heroku-like box]]></title>
    <link href="http://icebergist.com/posts/quick-virtualboxvagrant-setup-with-heroku-like-box"/>
    <updated>2013-09-16T10:00:00+02:00</updated>
    <id>http://icebergist.com/posts/quick-virtualboxvagrant-setup-with-heroku-like-box</id>
    <content type="html"><![CDATA[<p>Here is a quick way to setup VirtualBox using Vagrant with Heroku-like box on Mac.</p>

<ol>
<li><p>Install VirtualBox from <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank"><a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></a></p></li>
<li><p>Install Vagrant from <a href="http://downloads.vagrantup.com/" target="_blank"><a href="http://downloads.vagrantup.com/">http://downloads.vagrantup.com/</a></a></p></li>
<li><p>Create Vagrantfile for Heroku-like box (based on <a href="https://github.com/ejholmes/vagrant-heroku" target="_blank"><a href="https://github.com/ejholmes/vagrant-heroku">https://github.com/ejholmes/vagrant-heroku</a></a>) that looks something like:</p></li>
</ol>


<p>``` ruby</p>

<pre><code>    Vagrant.configure("2") do |config|        
        config.vm.box = "heroku"
        config.vm.box_url = "https://dl.dropboxusercontent.com/s/rnc0p8zl91borei/heroku.box"
      config.vm.synced_folder ".", "/vagrant", :nfs =&gt; true
        config.vm.network :private_network, ip: "192.168.1.42"  # required for NFS
    end
</code></pre>

<p>```</p>

<p>Beside telling Vagrant to use Heroku-like box from <a href="https://github.com/ejholmes/vagrant-heroku" target="_blank"><a href="https://github.com/ejholmes/vagrant-heroku">https://github.com/ejholmes/vagrant-heroku</a></a> it also sets up shared dir between host and VM machine. It will mount Vagrantfile dir (.) to /vagrant in VM.</p>

<p><code>vagrant up</code> will setup the VM and start it up.</p>

<p>Now you can use <code>vagrant ssh</code> to login to VM.</p>

<p>Vagrant Heroku-like box comes with Postgresql, but if you want you can easily setup sqlite:</p>

<p><code>sh
sudo apt-get install libsqlite3-dev
</code></p>

<p><strong>Bonus tip</strong>: when you are working on multiple projects sometimes you can forget which VMs are running. You can list all running VMs using:</p>

<p><code>sh
VBoxManage list runningvms
</code></p>

<p>Further reading:</p>

<ul>
<li><a href="http://docs.vagrantup.com/v2/" target="_blank">Vagrant docs</a></li>
<li><a href="https://github.com/ejholmes/vagrant-heroku" target="_blank">Vagrant Heroku-like box</a> which can be easily customized.</li>
<li><a href="http://loudcoding.com/posts/how-to-use-vagrant-to-run-celadon-cedar-stack-on-heroku/" target="_blank">Another Vagrant setup tutorial</a></li>
<li><a href="https://www.stackmachine.com/blog/web-development-on-a-vm-is-it-slower" target="_blank">VM speed benchmarks</a> in case you doubt in VM speed.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsDiff]]></title>
    <link href="http://icebergist.com/posts/railsdiff"/>
    <updated>2013-09-10T10:00:00+02:00</updated>
    <id>http://icebergist.com/posts/railsdiff</id>
    <content type="html"><![CDATA[<p><a title="RailsDiff - compare Rails default app" href="http://railsdiff.org/" target="_blank">RailsDiff</a>
is a very useful site when upgrading Rails versions (for example, from Rails 3.2 to Rails 4). It will generate default Rails app using two different Rails versions and it will compare them. The result is that you can see all the configuration changes (like in application.rb) and all other changes &#8211; which is really useful when upgrading to new Rails version.</p>
]]></content>
  </entry>
  
</feed>
