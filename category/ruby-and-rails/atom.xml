<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby and Rails | Icebergist]]></title>
  <link href="http://icebergist.com/category/ruby-and-rails/atom.xml" rel="self"/>
  <link href="http://icebergist.com/"/>
  <updated>2015-05-04T11:40:09+02:00</updated>
  <id>http://icebergist.com/</id>
  <author>
    <name><![CDATA[Orange Iceberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to skip Devise trackable updates]]></title>
    <link href="http://icebergist.com/posts/how-to-skip-devise-trackable-updates/"/>
    <updated>2014-05-12T19:10:06+02:00</updated>
    <id>http://icebergist.com/posts/how-to-skip-devise-trackable-updates</id>
    <content type="html"><![CDATA[<p>Devise has a very useful Trackable module used to track user&rsquo;s sign in count, timestamps and IP address. There are some occasions when you need to disable tracking. For example for API requests where user signs in on every request; for instances where admin might sign in as an user; and similar.</p>

<p>To disable Devise Trackable module you need to set <code>request.env["devise.skip_trackable"] = true</code>. You have to do that before trying to authenticate user, so you&rsquo;ll want to put it in a before_filter, or even better prepend_before_filter to make sure it&rsquo;s before authentication.</p>

<p>Add this to your controller in which you want to disable tracking:</p>

<p>```
prepend_before_filter :disable_devise_trackable</p>

<p>protected
  def disable_devise_trackable</p>

<pre><code>request.env["devise.skip_trackable"] = true
</code></pre>

<p>  end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick VirtualBox/Vagrant setup with Heroku-like box]]></title>
    <link href="http://icebergist.com/posts/quick-virtualboxvagrant-setup-with-heroku-like-box"/>
    <updated>2013-09-16T10:00:00+02:00</updated>
    <id>http://icebergist.com/posts/quick-virtualboxvagrant-setup-with-heroku-like-box</id>
    <content type="html"><![CDATA[<p>Here is a quick way to setup VirtualBox using Vagrant with Heroku-like box on Mac.</p>

<ol>
<li><p>Install VirtualBox from <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank"><a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></a></p></li>
<li><p>Install Vagrant from <a href="http://downloads.vagrantup.com/" target="_blank"><a href="http://downloads.vagrantup.com/">http://downloads.vagrantup.com/</a></a></p></li>
<li><p>Create Vagrantfile for Heroku-like box (based on <a href="https://github.com/ejholmes/vagrant-heroku" target="_blank"><a href="https://github.com/ejholmes/vagrant-heroku">https://github.com/ejholmes/vagrant-heroku</a></a>) that looks something like:</p></li>
</ol>


<p>``` ruby</p>

<pre><code>    Vagrant.configure("2") do |config|        
        config.vm.box = "heroku"
        config.vm.box_url = "https://dl.dropboxusercontent.com/s/rnc0p8zl91borei/heroku.box"
        config.vm.synced_folder ".", "/vagrant", :nfs =&amp;gt; true
        config.vm.network :private_network, ip: "192.168.1.42"  # required for NFS
    end
</code></pre>

<p>```</p>

<p>Beside telling Vagrant to use Heroku-like box from <a href="https://github.com/ejholmes/vagrant-heroku" target="_blank"><a href="https://github.com/ejholmes/vagrant-heroku">https://github.com/ejholmes/vagrant-heroku</a></a> it also sets up shared dir between host and VM machine. It will mount Vagrantfile dir (.) to /vagrant in VM.</p>

<p><code>vagrant up</code> will setup the VM and start it up.</p>

<p>Now you can use <code>vagrant ssh</code> to login to VM.</p>

<p>Vagrant Heroku-like box comes with Postgresql, but if you want you can easily setup sqlite:</p>

<p><code>sh
sudo apt-get install libsqlite3-dev
</code></p>

<p><strong>Bonus tip</strong>: when you are working on multiple projects sometimes you can forget which VMs are running. You can list all running VMs using:</p>

<p><code>sh
VBoxManage list runningvms
</code></p>

<p>Further reading:</p>

<ul>
<li><a href="http://docs.vagrantup.com/v2/" target="_blank">Vagrant docs</a></li>
<li><a href="https://github.com/ejholmes/vagrant-heroku" target="_blank">Vagrant Heroku-like box</a> which can be easily customized.</li>
<li><a href="http://loudcoding.com/posts/how-to-use-vagrant-to-run-celadon-cedar-stack-on-heroku/" target="_blank">Another Vagrant setup tutorial</a></li>
<li><a href="https://www.stackmachine.com/blog/web-development-on-a-vm-is-it-slower" target="_blank">VM speed benchmarks</a> in case you doubt in VM speed.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsDiff]]></title>
    <link href="http://icebergist.com/posts/railsdiff"/>
    <updated>2013-09-10T10:00:00+02:00</updated>
    <id>http://icebergist.com/posts/railsdiff</id>
    <content type="html"><![CDATA[<p><a title="RailsDiff - compare Rails default app" href="http://railsdiff.org/" target="_blank">RailsDiff</a>
is a very useful site when upgrading Rails versions (for example, from Rails 3.2 to Rails 4). It will generate default Rails app using two different Rails versions and it will compare them. The result is that you can see all the configuration changes (like in application.rb) and all other changes &#8211; which is really useful when upgrading to new Rails version.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec and FactoryGirl setup for testing Carrierwave uploaders]]></title>
    <link href="http://icebergist.com/posts/rspec-and-factorygirl-setup-for-testing-carrierwave-uploaders"/>
    <updated>2013-09-07T10:00:00+02:00</updated>
    <id>http://icebergist.com/posts/rspec-and-factorygirl-setup-for-testing-carrierwave-uploaders</id>
    <content type="html"><![CDATA[<p>Assume that you have the usual setup with model (MyFile) using simple Carrierwave uploader (MyFileUploader):</p>

<pre># app/models/my_file.rb
class MyFile &lt; ActiveRecord::Base
  mount_uploader :file, MyFileUploader
end</pre>


<p>To be able to test Carrierwave uploaders with RSpec using FactoryGirl factories you need:</p>

<ul>
<li><span style="line-height: 13px;">define factory with uploaded file</span></li>
<li>modify test environment storage so test file uploads are separated from other uploads</li>
<li>turn off image processing to speed up tests</li>
<li>perform cleanup after each test</li>
</ul>


<h2>Define factory</h2>

<pre># spec/factories/my_files.rb
FactoryGirl.define do
 factory :my_file do
   photo Rack::Test::UploadedFile.new(File.open(File.join(Rails.root, '/spec/fixtures/myfiles/myfile.jpg')))
 end
end</pre>


<h2>Setup Carrierwave</h2>

<p>First we need to make sure Carrierwave is using local file system for storage and to disable file processing for testing environments. Disabling file processing will speed up tests considerably. We can do that by adding following to Carrierwave initializer:</p>

<pre>if Rails.env.test? || Rails.env.cucumber?
  CarrierWave.configure do |config|
    config.storage = :file
    config.enable_processing = false
  end
end</pre>


<p>Next we should separate test uploads from any other uploads. We can do that by modifying cache_dir and store_dir methods for all Carrierwave models (i.e. all models that are descendants of CarrierWave::Uploader::Base). So the whole Carrierwave initializer looks something like:</p>

<pre># config/initializers/carrierwave.rb
if Rails.env.test? || Rails.env.cucumber?
  CarrierWave.configure do |config|
    config.storage = :file
    config.enable_processing = false
  end

  # make sure our uploader is auto-loaded
  MyFileUploader

  # use different dirs when testing
  CarrierWave::Uploader::Base.descendants.each do |klass|
    next if klass.anonymous?
    klass.class_eval do
      def cache_dir
        "#{Rails.root}/spec/support/uploads/tmp"
      end

      def store_dir
        "#{Rails.root}/spec/support/uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}"
      end
    end
  end
end</pre>


<h2>Clean up uploaded files</h2>

<p>Using factory defined above will create uploaded files in cache_dir and store_dir. These are just temporary files and should be removed after each test, so each of them has a clean slate. By adding after :each hook in RSpec configuration block we can remove these files simply by deleting spec/support/uploads dir.</p>

<pre># spec_helper.rb
RSpec.configure do |config|
  config.after(:each) do
    if Rails.env.test? || Rails.env.cucumber?
      FileUtils.rm_rf(Dir["#{Rails.root}/spec/support/uploads"])
    end 
  end
end</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Random Rails tips]]></title>
    <link href="http://icebergist.com/posts/random-rails-tips"/>
    <updated>2013-03-09T09:00:00+01:00</updated>
    <id>http://icebergist.com/posts/random-rails-tips</id>
    <content type="html"><![CDATA[<p>Here are some random Rails tips I&#8217;ve found useful:</p>

<ul>
<li><strong>rails console sandbox</strong> &#8211; if you open console like this it will rollback all database changes once you exit. Pretty useful for playing around without making any changes to database.</li>
<li><strong>rake db:migrate:status</strong> &#8211; useful when you want to see the status of current database. It will show the status of all migrations.</li>
<li><strong>User.pluck(:email)</strong> &#8211; since Rails 3.2.1 you can use <a href="http://apidock.com/rails/ActiveRecord/Calculations/pluck">pluck</a> method to get an array of values in one particular column. It&#8217;s the equvivalent of doing User.select(:email).map(&amp;:email)</li>
</ul>

]]></content>
  </entry>
  
</feed>
