<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby and Rails | Icebergist]]></title>
  <link href="http://icebergist.com/category/ruby-and-rails/atom.xml" rel="self"/>
  <link href="http://icebergist.com/"/>
  <updated>2016-03-24T13:23:19+01:00</updated>
  <id>http://icebergist.com/</id>
  <author>
    <name><![CDATA[Orange Iceberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rake db:schema:load vs rake db:migrate]]></title>
    <link href="http://icebergist.com/posts/rake-db-migrate-vs-rake-db-schema-load/"/>
    <updated>2016-03-24T08:09:25+01:00</updated>
    <id>http://icebergist.com/posts/rake-db-migrate-vs-rake-db-schema-load</id>
    <content type="html"><![CDATA[<p>Sooner or later every new Ruby developer needs to understand  differences between this two common rake tasks. Basically, these simple definition tells us everything we need to know:</p>

<ul>
<li><code>rake db:migrate</code> runs migrations that have not run yet</li>
<li><code>rake db:schema:load</code> loads the schema.db file into database.</li>
</ul>


<p>but the real question is when to use one or the other.</p>

<p><strong>Advice:</strong> <a id="advice"></a> when you are adding a new migration to an existing app then you need to run <code>rake db:migrate</code>, but when you join to existing application (<em>especially some old application</em>), or when you drop your applications database and you need to create it again, always run <code>rake db:schema:load</code> to load schema.</p>

<h3>Example</h3>

<p>I am working on application which use <a href="https://github.com/globalize/globalize">globalize gem</a> for ActiveRecord model/data translations. Globalize work this way:</p>

<ul>
<li>first specify attributes which need to be translatable</li>
</ul>


<p><code>ruby
class Post &lt; ActiveRecord::Base
  translates :title, :text
end
</code></p>

<!--more-->


<ul>
<li>then create translation tables</li>
</ul>


<p>```
class CreatePosts &lt; ActiveRecord::Migration
  def up</p>

<pre><code>create_table :posts do |t|
  t.timestamps
end
Post.create_translation_table! title: :string, text: :text
</code></pre>

<p>  end
  def down</p>

<pre><code>drop_table :posts
Post.drop_translation_table!
</code></pre>

<p>  end
end
```
<strong>Note</strong> <em>that the ActiveRecord model Post must already exist and have listed attributes for translations</em>.</p>

<ul>
<li>and run <code>rake db:migrate</code> .</li>
</ul>


<p>Problem comes when you change your mind and decide to leave title to be untranslatable.</p>

<ul>
<li>remove title from post translations table</li>
</ul>


<p>```
class RemoveTitleFromPostTranslations &lt; ActiveRecord::Migration
  def up</p>

<pre><code>remove_column :post_translations, :title, :string
</code></pre>

<p>  end</p>

<p>  def down</p>

<pre><code>Entry.add_translation_fields! title: :string
</code></pre>

<p>  end
end
```
+ add title to posts table</p>

<p>```
class AddTitleToPosts &lt; ActiveRecord::Migration
  def change</p>

<pre><code>add_column :posts, :title, :string
</code></pre>

<p>  end
end
```
+ remove title attribute from model translations</p>

<p><code>
class Post &lt; ActiveRecord::Base
  translates :text
end
</code>
+ and run <code>rake db:migrate</code>.</p>

<p>Everything looking good, so where is the problem?</p>

<p>Here it is! If you decide to delete your database and create it again you need to use:</p>

<ul>
<li><code>rake db:drop</code></li>
<li><code>rake db:create</code></li>
<li><code>rake db:schema:load</code></li>
</ul>


<p>Because, if you try to use <code>rake db:migrate</code> instead of <code>rake db:schema:load</code> you will get <strong>BIG ERROR!</strong>, because for your first migration &ldquo;create_posts&rdquo; it is necessary that you have defined translatable attributes :title and :text in Post model, but you removed :title from Post model translations.</p>

<p>So just follow <a href="#advice">advice</a> above, and good luck.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Headless Firefox in Ubuntu on VirtualBox for Cucumber testing]]></title>
    <link href="http://icebergist.com/posts/headless-firefox-in-ubuntu-on-virtual-box-for-cucumber-testing/"/>
    <updated>2015-12-03T10:12:56+01:00</updated>
    <id>http://icebergist.com/posts/headless-firefox-in-ubuntu-on-virtual-box-for-cucumber-testing</id>
    <content type="html"><![CDATA[<p>If you use <a href="http://www.vagrantup.com/downloads.html">Vagrant</a>, <a href="https://www.virtualbox.org/">VirtualBox</a> and Ubuntu to build your Rails apps and you want to test it with Cucumber scenarios, this is the right post for you. By default Vagrant and VirtualBox use Ubuntu without an X server and GUI.</p>

<p>Everything goes well until you need <code>@javascript</code> flag for your cucumber scenario. <code>@javascript</code> uses a javascript-aware system to process web requests (e.g. Selenium) instead of the default (non-javascript-aware) webrat browser.</p>

<h3>Install Mozilla Firefox</h3>

<p>Selenium WebDriver is flexible and lets you run selenium headless in servers with no display. But in order to run, Selenium needs to launch a browser. If there is no display to the machine, the browsers are not launched. So in order to use selenium, you need to fake a display and let selenium and the browser think they are running in a machine with a display.</p>

<p>Install latest version of Mozilla Firefox:</p>

<p><code>sudo apt-get install firefox</code></p>

<p>Since Ubuntu is running without a X server Selenium cannot start Firefox because it requires an X server.</p>

<h3>Setting up virtual X server</h3>

<p>Virtual X server is required to make browsers run normally by making them believe there is a display available, although it doesn&rsquo;t create any visible windows.</p>

<!--more-->


<p>Xvfb (X Virtual FrameBuffer) works fine for this. Xvfb lets you run X-Server in machines with no display devices.</p>

<p>Install xvfb on ubuntu:</p>

<p><code>sudo apt-get install xvfb</code></p>

<p>Lets run the Xvfb service in a display number which is less likely to clash even if you add a display at a later stage. Display 10 will do fine.</p>

<p><code>sudo Xvfb :10 -ac</code></p>

<p>The parameter -ac makes xvfb run with access control off. The server should be running now.</p>

<h3>Headless Firefox</h3>

<p>Before you can run a browser, you need to set the environment variable DISPLAY with the display number at which xvfb is running.</p>

<p>Open new tab in terminal and set the DISPLAY variable:</p>

<p><code>export DISPLAY=:10</code></p>

<p>and start mozilla firefox:</p>

<p><code>firefox</code></p>

<p>Now you run firefox headlessly in Ubuntu, and you can run your cucumber scenarios with <code>@javascript</code> flag.</p>

<h3>Start virtual X server automatically</h3>

<p>To run your X server automatically, after installing Xvfb, you will need to:</p>

<ul>
<li>put content of <a href="https://gist.github.com/basti/2db0b71e893ee4d6d015">this gist</a> in <code>/etc/init.d/xvfb</code> (hint use <code>sudo wget</code> command to do that)</li>
<li>make it executable <code>sudo chmod a+x /etc/init.d/xvfb</code></li>
<li>start xvfb on display number 10 <code>export DISPLAY=:10</code></li>
<li>run X server <code>sudo /etc/init.d/xvfb start</code></li>
<li>when you want to stop X server <code>sudo /etc/init.d/xvfb stop</code></li>
</ul>


<p>This is my way to run firefox headlessly in Virtual box Ubuntu, and to run cucumber scenarios with <code>@javascript</code> flag.</p>

<p>References:</p>

<ul>
<li><a href="http://www.installationpage.com/selenium/how-to-run-selenium-headless-firefox-in-ubuntu/">Selenium Headless Automated Testing in Ubuntu</a></li>
<li><a href="https://gist.github.com/jterrace/2911875">Xvfb init script for Ubuntu</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating and publishing a ruby gem]]></title>
    <link href="http://icebergist.com/posts/creating-and-publishing-a-ruby-gem/"/>
    <updated>2015-06-08T09:12:04+02:00</updated>
    <id>http://icebergist.com/posts/creating-and-publishing-a-ruby-gem</id>
    <content type="html"><![CDATA[<p>A gem is a simple way to distribute functionality, it can be a small plugin, a Ruby library or sometimes a whole program. Thanks to RubyGems, a gem hosting service, developers have a wide range of gems at their disposal allowing them to easily add functionality to their applications.</p>

<p>But what if there is no gem available that will suit the functionality you need, and you find yourself writing the same code over and over again for different projects? Well, in that case you should consider making your own gem.</p>

<p>It&rsquo;s considered a good practice to extract a gem out of an existing application, since that way you will have a better understanding of all the requirements as well as how the gem will be used. This blog post will illustrate just that on a real life example, and will take you through the process of creating a slug_converter gem.</p>

<!--more-->


<h3>Slug converter gem</h3>

<p>Source code for slug_converter gem was developed while working on a link shortener application, in order to generate a string consisting of predefined characters, based on a given id number of a link. As it will be described in this blog post, this code was easily extracted from the application into an independent gem that was released on  RubyGems.</p>

<p>Although it may seem like a complex task at first, creating a gem is not that difficult, if you have RubyGems and Bundler installed you are good to go. We already know what RubyGems is, and Bundler is a package manager that determines a full set of direct dependencies needed by your application.</p>

<p>Now let&rsquo;s build a gem!</p>

<h3>Creating a gem</h3>

<p>First step is to make sure that bundler gem is installed.
<code>sh
$ gem install bundler
</code></p>

<p>once bundler is installed creating a structure for your new gem is easy,
```sh</p>

<pre><code>$ bundle gem slug_converter
</code></pre>

<p>```</p>

<p>The first time you use bundler to create a gem you will be prompted to answer a couple of questions:
```sh</p>

<pre><code>Do you want to include code of conduct in your gems you generate?
Do you want to licence your code permissively under the MIT licence?
Do you want to generate tests with your gem? 
Type rspec or minitest to generate those tests files now and in the future:
</code></pre>

<p>```</p>

<p>Answering these questions will help bundler configure and setup files that are being generated now and in the future. Here we answered yes to first 4 qestions and choose rspec for testing.</p>

<p>Running <code>$ bundle gem slug_converter</code> command resulted with &ldquo;slug_converter&rdquo; directory with essential gem file structure being created, and git repository initialized, assuming that you are using git for version management (as you should).
<code>sh
Creating gem 'slug_converter'...
 create  slug_converter/Gemfile
 create  slug_converter/.gitignore
 create  slug_converter/lib/slug_converter.rb
 create  slug_converter/lib/slug_converter/version.rb
 create  slug_converter/slug_converter.gemspec
 create  slug_converter/Rakefile
 create  slug_converter/README.md
 create  slug_converter/bin/console
 create  slug_converter/bin/setup
 create  slug_converter/LICENSE.txt
 create  slug_converter/.travis.yml
 create  slug_converter/.rspec
 create  slug_converter/spec/spec_helper.rb
 create  slug_converter/spec/slug_converter_spec.rb
</code></p>

<p>Let&rsquo;s go through files that bundler generated for us, .gemspec file is the &ldquo;heart&rdquo; of your gem so lets start with <code>slug_converter.gemspec</code></p>

<p>```ruby
lib = File.expand_path(&lsquo;../lib&rsquo;, <strong>FILE</strong>)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require &lsquo;slug_converter/version&rsquo;</p>

<p>Gem::Specification.new do |spec|
  spec.name         = &ldquo;slug_converter&rdquo;
  spec.version      = SlugConverter::VERSION
  spec.authors      = [&ldquo;Your Name&rdquo;]
  spec.email        = [&ldquo;<a href="&#109;&#x61;&#x69;&#108;&#116;&#111;&#58;&#x79;&#x6f;&#x75;&#114;&#x65;&#x6d;&#x61;&#105;&#x6c;&#x40;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#x2e;&#x63;&#x6f;&#x6d;">&#121;&#111;&#x75;&#114;&#x65;&#x6d;&#x61;&#105;&#x6c;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#x6c;&#101;&#46;&#99;&#x6f;&#109;</a>&rdquo;]</p>

<p>  # if spec.respond_to?(:metadata)
  #   spec.metadata[&lsquo;allowed_push_host&rsquo;] = &ldquo;TODO: Set to &lsquo;<a href="http://mygemserver.com">http://mygemserver.com</a>&rsquo; to prevent pushes to rubygems.org, or delete to allow pushes to any server.&rdquo;
  # end</p>

<p>  spec.summary      = %q{Number &lt;&ndash;> Slug converter}
  spec.description  = %q{Generates a slug based on the given number and the other way around}
  spec.homepage     = &ldquo;<a href="https://github.com/orangeiceberg/slug_converter">https://github.com/orangeiceberg/slug_converter</a>&rdquo;
  spec.license      = &ldquo;MIT&rdquo;</p>

<p>  spec.files        = <code>git ls-files -z</code>.split(&ldquo;\x0&rdquo;).reject { |f| f.match(%r{^(test|spec|features)/}) }
  spec.bindir       = &ldquo;exe&rdquo;
  spec.executables  = spec.files.grep(%r{^exe/}) { |f| File.basename(f) }
  spec.require_paths= [&ldquo;lib&rdquo;]</p>

<p>  spec.add_development_dependency &ldquo;bundler&rdquo;, &ldquo;~> 1.8&rdquo;
  spec.add_development_dependency &ldquo;rake&rdquo;, &ldquo;~> 10.0&rdquo;
end
```
This file contains metadata about your gem and it can be populated directly, so here you can enter all the data such as name, description, licence&hellip; This file also contains information about what files should be packaged in your gem, as well as the load path to include the gem directory when the gem is first loaded. Most of these default settings will work for the majority of gems but you can always edit them if you want different behavior. At the bottom of the file add any gem dependencies that are required.</p>

<p>The version number of the gem is set in <code>SlugConverter::VERSION</code> constant which is kept in a separate version.rb file, and you can change it there for every new version of your gem.</p>

<pre><code>lib
 |--slug_converter
         |--version.rb
</code></pre>

<p>A very important part of every gem is the <code>README</code> file, where you can describe how to install and use the gem, and the <code>LICENCE</code> file where you can define the terms and conditions under which the gem can be used.</p>

<p>In the lib directory there is a file which has the same name as your gem (recommended), and that file will be loaded when someone requires your gem. If the gem you are writing is simple all the code can be placed in this single file, or in case of more complex gems all the other files from the lib directory are required in this file.</p>

<p>There is also a <code>Gemfile</code> generated, but this file doesn&rsquo;t have to be managed directly since all it does is look in <code>.gemspec</code> for required dependencies and then loads them through bundler. All the dependencies required by the gem should be specified in the <code>.gemspec</code> file.</p>

<p>Another file that is generated by the bundler is <code>Rakefile</code> which just adds some gem tasks from bundler, and we can see those tasks with explanation by running
```sh</p>

<pre><code>rake -T
rake build    # Build slug_converter-0.0.1.gem into the pkg directory
rake install  # Build and install slug_converter-0.0.1.gem into system gems
rake release  # Create tag v0.0.1 and build and push slug_converter-0.1.0.gem to Rubygems
</code></pre>

<p>```</p>

<h3>Writing tests</h3>

<p>If you are following the principles of Test Driven Development you will probably like to start by writing tests for you gem, for that purpose I would suggest using RSpec.
To do that you will need to add rspec as a development dependency to you gemspec file:</p>

<pre><code>spec.add_development_dependency 'rspec'
</code></pre>

<p>As mentioned in the beginning, when running bundle gem for the first time, bundler will asks if you would like to generate test files for your gem and to choose if you want to use rspec or minitest. If you answer with yes, and choose rspec, bundler will generate a spec directory with two files:</p>

<pre><code>|-- spec
      |-- slug_converter_spec.rb
      |-- spec_helper.rb
</code></pre>

<p>In the <code>spec_helper.rb</code> file you can reference any test globals or configuration.</p>

<p>Since we are extracting code from an existing application we already have all the tests written so we just need to copy them into the generated <code>spec/slug_converter_spec.rb</code> file.
```ruby
require &lsquo;spec_helper&rsquo;
describe SlugConverter do
  it &lsquo;has a version number&rsquo; do</p>

<pre><code>expect(SlugConverter::VERSION).not_to be nil
</code></pre>

<p>  end
  describe &ldquo;.number&rdquo; do</p>

<pre><code>it "returns number when number is set" do
  converted_slug= SlugConverter.new(111)
  expect(converted_slug.number).to eq(111)
end

it "returns decoded number for existing slug" do
  converted_slug = SlugConverter.new("vg")
  expect(converted_slug.number).to eq(363)
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;.number&rdquo; do</p>

<pre><code>it "sets number to given value" do
  converted_slug = SlugConverter.new(211)
  expect(converted_slug.number=210).to eq(210)
end

it "sets slug to encoded value of number" do
  converted_slug = SlugConverter.new(211)
  converted_slug.number=210
  expect(converted_slug.slug).to eq("pb")
end

it "sets number to integer value of given number passed as string" do
  converted_slug = SlugConverter.new("210")
  expect(converted_slug.number).to eq(210)
end

it "sets slug to encoded value of given number passed as string" do
  converted_slug = SlugConverter.new("210")
  expect(converted_slug.slug).to eq("pb")
end

it "sets number to integer value of argument that starts with a number but also contains letters" do
  converted_slug = SlugConverter.new("210jj")
  expect(converted_slug.number).to eq(210)
end

it "sets slug to encoded value of argument that starts with a number but also contains letters" do
  converted_slug = SlugConverter.new("210jj")
  expect(converted_slug.slug).to eq("pb")
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;.slug&rdquo; do</p>

<pre><code> it "returns slug when slug is set" do
    converted_slug = SlugConverter.new("hy")
    expect(converted_slug.slug).to eq("hy")
 end

 it "returns encoded slug when link id is set" do
    converted_id = SlugConverter.new(113)
    expect(converted_id.slug).to eq("hy")
 end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;.slug&rdquo; do</p>

<pre><code>it "sets slug to given value" do
  converted_slug = SlugConverter.new("ezk")
  expect(converted_slug.slug=("ebk")).to eq("ebk")
end

it "sets number to decoded value of slug" do
  converted_slug = SlugConverter.new("pb")
  converted_slug.slug=("ezk")
  expect(converted_slug.number).to eq(1483)
end

it "raises Arrgument Error exception if given value is an empty string" do
  expect { SlugConverter.new("") }.to raise_error(ArgumentError)
end

it "raises Arrgument Error exception if given value is nil" do
  expect { SlugConverter.new(nil) }.to raise_error(ArgumentError)
end

it "raises Arrgument Error exception if given value contains unpermitted letters" do
  expect { SlugConverter.new("iiii") }.to raise_error(ArgumentError)
end

it "raises Arrgument Error exception if given value starts with letter but contains numbers" do
  expect { SlugConverter.new("bb12") }.to raise_error(ArgumentError)
end
</code></pre>

<p>  end
end
```</p>

<p>To make rspec rake task available we will setup tasks folder where we&rsquo;ll place our <code>rspec.rake</code> file containing only 2 lines:
```ruby</p>

<pre><code>require 'rspec/core/rake_task'
RSpec::Core::RakeTask.new(:spec)
</code></pre>

<p>```</p>

<p>and then we will import this file in our Rakefile that bundler provided automatically:
```ruby</p>

<pre><code>Dir.glob('tasks/**/*.rake').each(&amp;method(:import))
</code></pre>

<p>```</p>

<p>Now run:
<code>sh
bundle exec rake spec
</code>
And watch your tests fail. :)</p>

<h3>Add gem functionality</h3>

<p>Now we need to make those test go green. To do that we will again copy the existing code from our application in the main gem file <code>lib/slug_converter.rb</code>:
```ruby
require &ldquo;slug_converter/version&rdquo;
require &lsquo;set&rsquo;
require &lsquo;gem_config&rsquo;</p>

<p>class SlugConverter
  include GemConfig::Base
  with_configuration do</p>

<pre><code>has :alphabet, default: "qjeghxtrpnfmdzwvsybkuoca"
</code></pre>

<p>  end</p>

<p>  def initialize(number_or_slug)</p>

<pre><code> @alphabet = SlugConverter.configuration.alphabet.split(//)
if number_or_slug.to_i != 0
  @number = number_or_slug.to_i
elsif validate_string(number_or_slug)
  @slug = number_or_slug.downcase
else
  raise ArgumentError, 'Argument must be integer value or non-empty string consisting of predefined letters'
end
</code></pre>

<p>  end</p>

<p>  def number</p>

<pre><code>if @number.nil?
  @number = bijective_decode
else
  @number
end
</code></pre>

<p>  end</p>

<p>  def number=(new_number)</p>

<pre><code>@number = new_number
@slug = bijective_encode
@number
</code></pre>

<p>  end</p>

<p>  def slug</p>

<pre><code>if @slug.nil?
  @slug = bijective_encode
else
  @slug
end
</code></pre>

<p>  end</p>

<p>  def slug=(new_slug)</p>

<pre><code>@slug = new_slug
@number = bijective_decode
@slug
</code></pre>

<p>  end</p>

<p>  private</p>

<pre><code>def bijective_encode
  id = @number
  return @alphabet[0] if id == 0
  s = ''
  base = @alphabet.length
  while id &gt; 0
    s &lt;&lt; @alphabet[id.modulo(base)]
    id /= base
  end
  s.reverse
end

def bijective_decode
  i = 0
  base = @alphabet.length
  @slug.each_char { |c| i = i * base + @alphabet.index(c) }
  i
end

def validate_string(slug)
  unless slug.nil?
    alphabet = Set.new @alphabet
    slug_letters = Set.new slug.downcase().split(//)
    slug != "" &amp;&amp; (slug_letters.subset? alphabet)
  end
end
</code></pre>

<p>end
```</p>

<p>Now when we run the tests again, they should all pass.</p>

<h3>Making your gem configurabile</h3>

<p>In order to allow users to set their own alphabet that will be used by the SlugConverter, we needed to make our gem configurabile. To do this we used <a href="https://github.com/krautcomputing/gem_config">https://github.com/krautcomputing/gem_config</a> gem.</p>

<p>You will notice this code at the begining of the SlugConverter class:
```ruby
class SlugConverter
  include GemConfig::Base</p>

<p>  with_configuration do</p>

<pre><code>has :alphabet, default: "qjeghxtrpnfmdzwvsybkuoca"
</code></pre>

<p>  end</p>

<p>  def initialize(number_or_slug)</p>

<pre><code> @alphabet = SlugConverter.configuration.alphabet.split(//)
 # ...
</code></pre>

<p>  end</p>

<p>  # rest of the code omitted  <br/>
end
<code>``
this code along with</code>spec.add_runtime_dependency &lsquo;gem_config&rsquo;<code>added as a dependency in</code>slug_converter.gemspec` file, alows us to make the gem configureabile.</p>

<p>Custom aphabet can than be defined by adding <code>config/initializers/slug_converter.rb</code> to your application, and defining the alphabet like this:
<code>ruby
SlugConverter.configuration.alphabet = "your_custom_alphabet_here"
</code></p>

<h3>Releasing your gem</h3>

<p>Now that we have the test passing and all the code in place it&rsquo;s time to make the gem available for everyone to use by releasing it on RubyGems, to do that you will need to have a RubyGems account. If this is the first time you release a gem you will be prompted to enter your RubyGems username and password. You will also need to have your repository setup on Github.</p>

<p>Then with just one comand:
```sh</p>

<pre><code>$ bundle exec rake release
</code></pre>

<p>```</p>

<ul>
<li>your code will be pushed to your Github repository,</li>
<li>your git repository will be tagged with the version number using a name like &ldquo;v1.0.0&rdquo;.</li>
<li>your gem released on RubyGems.</li>
</ul>


<p>The ruby gem described in this blog post can be found here <a href="https://rubygems.org/gems/slug_converter,">https://rubygems.org/gems/slug_converter,</a> and all the code is in this GitHub repository <a href="https://github.com/orangeiceberg/slug_converter">https://github.com/orangeiceberg/slug_converter</a> .</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[changing database starting id]]></title>
    <link href="http://icebergist.com/posts/changing-database-starting-id/"/>
    <updated>2015-06-01T11:03:47+02:00</updated>
    <id>http://icebergist.com/posts/changing-database-starting-id</id>
    <content type="html"><![CDATA[<p>For our new project it was necessary to modify the starting id of our database. This can be handled through migration for creating table but we decided to create a rake task that handled this for us.</p>

<p>The rake task that we created detects what database is being used and executes appropriate changes according to that.</p>

<!--more-->


<p>You can create a rake task using rails generate command for rake task:</p>

<p><code>
rails g task namespace task_name
</code>
This will create your task in lib/tasks with chosen namespace and task name.</p>

<p>Here is our task and an explanation that follows.</p>

<p>```ruby
namespace :database do
  desc &ldquo;Detect database that&rsquo;s being used and then increment its id&rdquo;
  task autoincrement: :environment do</p>

<pre><code>db_name_downcase = ActiveRecord::Base.connection.adapter_name.downcase

if Link.maximum(:id).to_i &lt; 1000
  if db_name_downcase.start_with? "mysql"
    ActiveRecord::Base.connection.execute("ALTER TABLE links AUTO_INCREMENT = 1000")
  end
  if db_name_downcase.start_with? "postgres"
    ActiveRecord::Base.connection.execute("ALTER SEQUENCE links_id_seq START with 1000 RESTART;")
  end
  if db_name_downcase.start_with? "sqlite"
    ActiveRecord::Base.connection.execute("insert into sqlite_sequence(name,seq) values('links', 1000)")
  end
else
  puts "To perform this task your database shouldn't have records with id number higher than 1000"
end
</code></pre>

<p>  end
end
```
We need to change the starting id of our database to 1000 so we check that we don&rsquo;t have a record with id higher than 1000. Link is our Active Record model and links is the name of our table.</p>

<p>ActiveRecord::Base.connection returns the connection currently associated with the class. We use it to detect the name of database and execute appropriate changes.</p>

<h3>MySQL</h3>

<p>For MySQL we need to set AUTO_INCREMENT value to 1000, Auto-increment allows a unique number to be generated when a new record is inserted into a table. When first record is created it sets its primary key to 1 by default  and it will auto increment by 1 for each new record.</p>

<h3>PostgreSQL</h3>

<p>For Postgres we have to explain what a sequence is. A sequence is a special kind of a database object designed for generating unique numeric identifiers. It is typically used to generate artificial primary keys. Sequences are similar to the Auto-increment concept in MySQL.</p>

<h3>SQLite</h3>

<p>For SQlite we altered sqlite_sequence table, which is an internal table used to implement AUTOINCREMENT. It is created automatically whenever any ordinary table with an AUTOINCREMENT integer primary key is created.</p>

<p>You can check <a href="http://stackoverflow.com/questions/2075331/change-starting-id-number">this Stack Overflow discussion</a> that was very helpful to me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize Devise permitted parameters]]></title>
    <link href="http://icebergist.com/posts/customize-devise-permitted-parameters/"/>
    <updated>2015-05-04T16:07:22+02:00</updated>
    <id>http://icebergist.com/posts/customize-devise-permitted-parameters</id>
    <content type="html"><![CDATA[<p>If you are using Devise gem for authentication and you have been adding custom fields to your model you’ll get in trouble when you try to create a new instance or update an existing one. All your added fields will be treated as unpermitted. The solution for this problem is to customise Devise’s configure_permited_parameters action. All you need to do is to add this action to your Application controller and push parameters that need to be permitted to devise_paremeter_sanitizer array. So let’s say you have a User Model and you have added company_name and website fields to your user’s table, to permit this parameters on sign_up you need to add this to your Application controller:</p>

<p><code>
def configure_permitted_parameters
  devise_parameter_sanitizer.for(:sign_up).push(:company_name, :website)
end
</code></p>

<p>It is the same principle for the :sign_in and :edit_account. You can see what are <a href="https://github.com/plataformatec/devise/blob/master/lib/devise/parameter_sanitizer.rb#L83">default permitted parameters here</a>.</p>
]]></content>
  </entry>
  
</feed>
