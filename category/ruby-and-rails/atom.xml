<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby and Rails | Icebergist]]></title>
  <link href="http://icebergist.com/category/ruby-and-rails/atom.xml" rel="self"/>
  <link href="http://icebergist.com/"/>
  <updated>2017-02-03T14:50:44+01:00</updated>
  <id>http://icebergist.com/</id>
  <author>
    <name><![CDATA[Orange Iceberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Ransackers to search for a key in PostgreSQL JSON column]]></title>
    <link href="http://icebergist.com/posts/using-ransackers-to-search-for-a-key-in-postgresql-json-column/"/>
    <updated>2016-06-20T12:39:42+02:00</updated>
    <id>http://icebergist.com/posts/using-ransackers-to-search-for-a-key-in-postgresql-json-column</id>
    <content type="html"><![CDATA[<p>Starting with v9.2, PostgreSQL added native JSON support which enabled us to take advantage of some benefits that come with NoSQL database within a traditional relational database such as PostgreSQL.</p>

<p>While working on a Ruby on Rails application that used PostgreSQL database to store data, we came a across an issue where we needed to implement a search by key within a JSON column.</p>

<p>We were alredy using <a href="https://github.com/activerecord-hackery/ransack">Ransack</a> for building search forms within the application, so we needed a way of telling Ransack to perform a search by given key in our JSON column.</p>

<p>This is where <a href="https://github.com/activerecord-hackery/ransack/wiki/using-ransackers">Ransackers</a> come in.</p>

<blockquote><p>The premise behind Ransack is to provide access to Arel predicate methods.</p></blockquote>

<p>You can find more information on Arel <a href="https://github.com/rails/arel">here</a>.</p>

<p>In our case we needed to perform a search within <code>transactions</code> table and <code>payload</code> JSON column, looking for records containing a key called <code>invoice_number</code>. To achieve this we added the following ransacker to our <code>Transaction</code> model</p>

<p><code>ruby
ransacker :invoice_number do |parent|
   Arel::Nodes::InfixOperation.new('-&gt;&gt;', parent.table[:payload], 'invoice_number')
end
</code>
Now with our search set on <code>link_type_cont</code> (cont being just one of Ransack available search predicates), if the user entered for example  <code>123</code> in the search filed, it would generate a query like this:</p>

<p><code>
SELECT  "transactions".* FROM "transactions"  WHERE ("transactions"."payload" -&gt;&gt; 'invoice_number' ILIKE '%123%')
</code></p>

<p>basically performing a search for records in <code>transactions</code> table that have a key called <code>invoice_number</code> with value containing a string <code>123</code>, within a JSON column <code>payload</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Show part of a Rails template in other locale]]></title>
    <link href="http://icebergist.com/posts/display-part-of-rails-template-with-different-locale/"/>
    <updated>2016-05-30T10:06:00+02:00</updated>
    <id>http://icebergist.com/posts/display-part-of-rails-template-with-different-locale</id>
    <content type="html"><![CDATA[<p>I recently worked on a Rails project, which had parts of pages in different languages. That may be a problem if you have already translated their entire text to all required languages. You can even be tempted to hardcode parts of the text into other languages. Fortunately, there is an elegant way to solve that problem, just wrap parts of template or partials into blocks with desired locale, like this:</p>

<p><code>ruby
&lt;% I18n.with_locale('en') do %&gt;
  ...part of your template
  or
  &lt;%= render partial: 'some/partial' %&gt;
&lt;% end %&gt;
</code></p>

<h3>Example</h3>

<p>Suppose, there is a template with only header and two paragraphs.</p>

<p>```</p>

<h1><%= t('my_great_header') %></h1>




<p><p>&lt;%= t(&lsquo;first_paragraph&rsquo;) %></p></p>

<p><p>&lt;%= t(&lsquo;second_paragraph&rsquo;) %></p>
```
And locale in English and French for that template.</p>

<p>```</p>

<h1>in config/locales/en.yml</h1>

<p>en:
  my_great_header: &ldquo;My English great header&rdquo;
  first_paragraph: &ldquo;First English paragraph&rdquo;
  second_paragraph: &ldquo;Second English paragraph&rdquo;</p>

<h1>in config/locales/fr.yml</h1>

<p>fr:
  my_great_header: &ldquo;My French great header&rdquo;
  first_paragraph: &ldquo;First French paragraph&rdquo;
  second_paragraph: &ldquo;Second French paragraph&rdquo;
```</p>

<p><!--more--></p>

<p>And client wants first paragraph to always be in English.</p>

<p>Just wrap first paragraph in block with locale <code>'en</code>, like this:</p>

<p>```
<h1>&lt;%= t(&lsquo;my_great_header&rsquo;) %></h1></p>

<p>&lt;% I18n.with_locale(&lsquo;en&rsquo;) do %>
  <p>&lt;%= t(&lsquo;first_paragraph&rsquo;) %></p>
&lt;% end %>
<p>&lt;%= t(&lsquo;second_paragraph&rsquo;) %></p>
```
and when you switch language to Franch result will be:</p>

<p>``` text
My French great header</p>

<p>First English paragraph</p>

<p>Second French paragraph
```</p>

<p>I hope that this helps. Have a nice day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying Rails app with Capistrano 3]]></title>
    <link href="http://icebergist.com/posts/deploying-with-capistrano-3/"/>
    <updated>2016-05-25T10:42:17+02:00</updated>
    <id>http://icebergist.com/posts/deploying-with-capistrano-3</id>
    <content type="html"><![CDATA[<p>In the lifetime of every application the time comes for it to be presented to everyone. That&rsquo;s why we have to put our application on a special server which is designed for this purpose. In one word, we need to <strong>deploy</strong> our application. In this post you will see how to deploy app with <a href="http://www.capistranorb.com/">Capistrano 3</a>.</p>

<p>Capistrano is a great developers tool that is used to automatically deploy projects to remote server.</p>

<h3>Add Capistrano to Rails app</h3>

<p>I will assume you already have a server set up and an application ready to be deployed remotely.</p>

<p>We will use gem <a href="https://github.com/capistrano/rails">&lsquo;capistrano-rails&rsquo;</a>, so we need to add this gems to Gemfile:</p>

<p><code>ruby
group :development do
  gem 'capistrano', '~&gt; 3.5'  
  gem 'capistrano-rails', '~&gt; 1.1.6'
end
</code>
and install gems with <code>$ bundle install</code>.</p>

<h3>Initialize Capistrano</h3>

<p>Then run the following command to create configuration files:</p>

<p><code>
$ bundle exec cap install
</code></p>

<p>This command  creates all the necessary configuration files and directory structure with two stages, staging and production:</p>

<p><code>
Capfile
config/deploy.rb
config/deploy/production.rb
config/deploy/staging.rb
lib/capistrano/tasks
</code></p>

<!--more-->


<h3>Require needed gems in Capfile</h3>

<p>Open the <code>Capfile</code> and add or uncomment this lines:</p>

<p><code>
require 'capistrano/setup'
require 'capistrano/deploy'
require 'capistrano/bundler'
require 'capistrano/rails/assets'
require 'capistrano/rails/migrations'
Dir.glob('lib/capistrano/tasks/*.rake').each { |r| import r }
</code></p>

<h4>Add capistrano-rbenv gem</h4>

<p>The <a href="https://github.com/capistrano/rbenv">capistrano-rbenv</a> gem provides rbenv support for Capistrano 3.</p>

<p>Add this line to the Gemfile:</p>

<p><code>
group :development do
  gem 'capistrano', '~&gt; 3.5'
  gem 'capistrano-rails', '~&gt; 1.1.6'
  gem 'capistrano-rbenv', '~&gt; 2.0', require: false
end
</code></p>

<p>And require this gem in Capfile <code>require 'capistrano/rbenv'</code>.</p>

<h4>Add capistrano-passenger gem</h4>

<p>The <a href="https://github.com/capistrano/passenger">capistrano-passenger</a> gem adds a task to restart your application after deployment via Capistrano.</p>

<p><code>
group :development do
  ...
  gem 'capistrano-rbenv', '~&gt; 2.0', require: false
  gem 'capistrano-passenger', '~&gt; 0.2.0'
end
</code>
And require this gem in Capfile <code>require 'capistrano/passenger'</code>.</p>

<h3>Configure deploy.rb file</h3>

<p>Open <code>config/deploy.rb</code> and add options for deployment:</p>

<ul>
<li>set all needed variables, this is the variant with two servers (<em>staging and production</em>) and with user created on server (<em>server setup is theme for different post</em>)</li>
</ul>


<p><code>
set :application, 'app-name'   # application name
set :deploy_user, 'user-name'   # name of user who is set on server
set :repo_url, 'git@github.com:nickname/repo_name.git'   # your repository url from github
set :branch, ENV.fetch('BRANCH', 'master')   # branch which you want to deploy from
</code>
+ set the path where you want to find your app on server, starting from server&rsquo;s root</p>

<p><code>
set :deploy_to, -&gt; { "/path/to/app/#{fetch(:rails_env)}-#{fetch(:application)}" }
</code></p>

<ul>
<li>set config files, Capistrano uses a folder called shared to manage files and directories that should persist across releases</li>
</ul>


<p>```
set :linked_files, fetch(:linked_files, []).push(&lsquo;config/database.yml&rsquo;, &lsquo;config/secrets.yml&rsquo;)</p>

<p>set :linked_dirs, fetch(:linked_dirs, []).push(&lsquo;log&rsquo;, &lsquo;tmp/pids&rsquo;, &lsquo;tmp/cache&rsquo;, &lsquo;tmp/sockets&rsquo;, &lsquo;vendor/bundle&rsquo;, &lsquo;public/system&rsquo;)</p>

<p>```</p>

<ul>
<li>set ruby version, we use <code>gem 'capistrano-rbenv'</code> for this setup</li>
</ul>


<p><code>
set :rbenv_type, :user
set :rbenv_ruby, '2.2.2'
</code></p>

<ul>
<li>set option for restarting your application after deployment with <code>gem 'capistrano-passenger'</code></li>
</ul>


<p><code>
set :passenger_restart_with_touch, true
</code></p>

<ul>
<li>here you can put all kinds of rake tasks for different needs that you can run every time when you deploy your application.</li>
</ul>


<p>```
namespace :deploy do</p>

<pre><code>desc "Description of task"
task :name_of_task do
    # do something
end
</code></pre>

<p>end
```</p>

<h3>Capistrano&rsquo;s server settings</h3>

<p>You need to tell Capistrano where to find your server.
This is an example of server&rsquo;s settings for application where everything is on same machine (application, server, database).</p>

<ul>
<li>In <code>config/deploy/staging</code> set:</li>
</ul>


<p><code>
server 'your.staging.server.com', user: fetch(:deploy_user), roles: %w{app db web}
</code></p>

<ul>
<li>and set rails environment</li>
</ul>


<p><code>
set :rails_env, 'staging'
</code></p>

<p>Also set the same configuration for production server.</p>

<p>In <code>config/deploy/production</code> add:</p>

<p><code>
server 'your.production.server.com', user: fetch(:deploy_user), roles: %w{app db web}
set :rails_env, 'production'
</code></p>

<h3>Deploy your application</h3>

<p>Just run <code>deploy</code> task:</p>

<p><code>
bundle exec cap staging deploy
</code></p>

<p>or</p>

<p><code>
bundle exec cap production deploy
</code>
and that is it, your app is live and you can visit it on server&rsquo;s name url, in our example case <em>your.staging.server.com</em>.</p>

<p>Note: you can find complete documentation on <a href="http://capistranorb.com/">Capistrano site</a>.</p>

<p>Have a nice day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rake db:schema:load vs rake db:migrate]]></title>
    <link href="http://icebergist.com/posts/rake-db-migrate-vs-rake-db-schema-load/"/>
    <updated>2016-03-24T08:09:25+01:00</updated>
    <id>http://icebergist.com/posts/rake-db-migrate-vs-rake-db-schema-load</id>
    <content type="html"><![CDATA[<p>Sooner or later every new Ruby developer needs to understand  differences between this two common rake tasks. Basically, these simple definition tells us everything we need to know:</p>

<ul>
<li><code>rake db:migrate</code> runs migrations that have not run yet</li>
<li><code>rake db:schema:load</code> loads the schema.db file into database.</li>
</ul>


<p>but the real question is when to use one or the other.</p>

<p><strong>Advice:</strong> <a id="advice"></a> when you are adding a new migration to an existing app then you need to run <code>rake db:migrate</code>, but when you join to existing application (<em>especially some old application</em>), or when you drop your applications database and you need to create it again, always run <code>rake db:schema:load</code> to load schema.</p>

<h3>Example</h3>

<p>I am working on application which use <a href="https://github.com/globalize/globalize">globalize gem</a> for ActiveRecord model/data translations. Globalize work this way:</p>

<ul>
<li>first specify attributes which need to be translatable</li>
</ul>


<p><code>ruby
class Post &lt; ActiveRecord::Base
  translates :title, :text
end
</code></p>

<!--more-->


<ul>
<li>then create translation tables</li>
</ul>


<p>```
class CreatePosts &lt; ActiveRecord::Migration
  def up</p>

<pre><code>create_table :posts do |t|
  t.timestamps
end
Post.create_translation_table! title: :string, text: :text
</code></pre>

<p>  end
  def down</p>

<pre><code>drop_table :posts
Post.drop_translation_table!
</code></pre>

<p>  end
end
```
<strong>Note</strong> <em>that the ActiveRecord model Post must already exist and have listed attributes for translations</em>.</p>

<ul>
<li>and run <code>rake db:migrate</code> .</li>
</ul>


<p>Problem comes when you change your mind and decide to leave title to be untranslatable.</p>

<ul>
<li>remove title from post translations table</li>
</ul>


<p>```
class RemoveTitleFromPostTranslations &lt; ActiveRecord::Migration
  def up</p>

<pre><code>remove_column :post_translations, :title, :string
</code></pre>

<p>  end</p>

<p>  def down</p>

<pre><code>Entry.add_translation_fields! title: :string
</code></pre>

<p>  end
end
```
+ add title to posts table</p>

<p>```
class AddTitleToPosts &lt; ActiveRecord::Migration
  def change</p>

<pre><code>add_column :posts, :title, :string
</code></pre>

<p>  end
end
```
+ remove title attribute from model translations</p>

<p><code>
class Post &lt; ActiveRecord::Base
  translates :text
end
</code>
+ and run <code>rake db:migrate</code>.</p>

<p>Everything looking good, so where is the problem?</p>

<p>Here it is! If you decide to delete your database and create it again you need to use:</p>

<ul>
<li><code>rake db:drop</code></li>
<li><code>rake db:create</code></li>
<li><code>rake db:schema:load</code></li>
</ul>


<p>Because, if you try to use <code>rake db:migrate</code> instead of <code>rake db:schema:load</code> you will get <strong>BIG ERROR!</strong>, because for your first migration &ldquo;create_posts&rdquo; it is necessary that you have defined translatable attributes :title and :text in Post model, but you removed :title from Post model translations.</p>

<p>So just follow <a href="#advice">advice</a> above, and good luck.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Headless Firefox in Ubuntu on VirtualBox for Cucumber testing]]></title>
    <link href="http://icebergist.com/posts/headless-firefox-in-ubuntu-on-virtual-box-for-cucumber-testing/"/>
    <updated>2015-12-03T10:12:56+01:00</updated>
    <id>http://icebergist.com/posts/headless-firefox-in-ubuntu-on-virtual-box-for-cucumber-testing</id>
    <content type="html"><![CDATA[<p>If you use <a href="http://www.vagrantup.com/downloads.html">Vagrant</a>, <a href="https://www.virtualbox.org/">VirtualBox</a> and Ubuntu to build your Rails apps and you want to test it with Cucumber scenarios, this is the right post for you. By default Vagrant and VirtualBox use Ubuntu without an X server and GUI.</p>

<p>Everything goes well until you need <code>@javascript</code> flag for your cucumber scenario. <code>@javascript</code> uses a javascript-aware system to process web requests (e.g. Selenium) instead of the default (non-javascript-aware) webrat browser.</p>

<h3>Install Mozilla Firefox</h3>

<p>Selenium WebDriver is flexible and lets you run selenium headless in servers with no display. But in order to run, Selenium needs to launch a browser. If there is no display to the machine, the browsers are not launched. So in order to use selenium, you need to fake a display and let selenium and the browser think they are running in a machine with a display.</p>

<p>Install latest version of Mozilla Firefox:</p>

<p><code>sudo apt-get install firefox</code></p>

<p>Since Ubuntu is running without a X server Selenium cannot start Firefox because it requires an X server.</p>

<h3>Setting up virtual X server</h3>

<p>Virtual X server is required to make browsers run normally by making them believe there is a display available, although it doesn&rsquo;t create any visible windows.</p>

<!--more-->


<p>Xvfb (X Virtual FrameBuffer) works fine for this. Xvfb lets you run X-Server in machines with no display devices.</p>

<p>Install xvfb on ubuntu:</p>

<p><code>sudo apt-get install xvfb</code></p>

<p>Lets run the Xvfb service in a display number which is less likely to clash even if you add a display at a later stage. Display 10 will do fine.</p>

<p><code>sudo Xvfb :10 -ac</code></p>

<p>The parameter -ac makes xvfb run with access control off. The server should be running now.</p>

<h3>Headless Firefox</h3>

<p>Before you can run a browser, you need to set the environment variable DISPLAY with the display number at which xvfb is running.</p>

<p>Open new tab in terminal and set the DISPLAY variable:</p>

<p><code>export DISPLAY=:10</code></p>

<p>and start mozilla firefox:</p>

<p><code>firefox</code></p>

<p>Now you run firefox headlessly in Ubuntu, and you can run your cucumber scenarios with <code>@javascript</code> flag.</p>

<h3>Start virtual X server automatically</h3>

<p>To run your X server automatically, after installing Xvfb, you will need to:</p>

<ul>
<li>put content of <a href="https://gist.github.com/basti/2db0b71e893ee4d6d015">this gist</a> in <code>/etc/init.d/xvfb</code> (hint use <code>sudo wget</code> command to do that)</li>
<li>make it executable <code>sudo chmod a+x /etc/init.d/xvfb</code></li>
<li>start xvfb on display number 10 <code>export DISPLAY=:10</code></li>
<li>run X server <code>sudo /etc/init.d/xvfb start</code></li>
<li>when you want to stop X server <code>sudo /etc/init.d/xvfb stop</code></li>
</ul>


<p>This is my way to run firefox headlessly in Virtual box Ubuntu, and to run cucumber scenarios with <code>@javascript</code> flag.</p>

<p>References:</p>

<ul>
<li><a href="http://www.installationpage.com/selenium/how-to-run-selenium-headless-firefox-in-ubuntu/">Selenium Headless Automated Testing in Ubuntu</a></li>
<li><a href="https://gist.github.com/jterrace/2911875">Xvfb init script for Ubuntu</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
